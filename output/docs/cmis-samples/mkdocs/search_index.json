{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Apache Chemistry CMIS Code Samples\n\n\n\n\n\n\nCMIS (Content Management Interoperability Services)\n is an OASIS standard enabling information sharing between different Content Management Systems.\n\n\n\n\n\n\n\nThis is a collection of code samples for \n\n\n\n\n\n\nApache Chemistry OpenCMIS\n - a CMIS library for Java\n\n\nApache Chemistry PortCMIS\n - a CMIS library for .Net\n\n\n\n\nWe assume that you have a rough understanding of CMIS. This is not a CMIS introduction course.\n\n\nMany code samples are marked with \nCMIS 1.0\n or \nCMIS 1.1\n. Those tags indicate the CMIS specification version that the server has to support to use the feature.\n\n\nThroughout the code samples you will find references to sections in the \nCMIS 1.1 specification\n; tags like \nSpec 1.5\n. We recommend that you have the specification document ready to hand. \n\n\n\n\nUnder Development\n\n\nThis sample collection is under development. Some areas are only sparely covered or not covered at all, yet.\nAlso some code samples lack a meaningful description. If you want help, please see the \nabout page\n.\n\n\n\n\n\n\nApache Chemistry\n\n\nApache Chemistry\n provides open source client and server implementations of \nCMIS 1.0\n and \nCMIS 1.1\n for multiple programming languages (Java, .Net, Python, PHP, Objective-C, JavaScript, \n).  \n\n\n\n\nDo you want to know more about CMIS and Apache Chemistry?\n\n\n\n\nThe book \nCMIS and Apache Chemistry in Action\n is a comprehensive guide to the CMIS standard and related ECM concepts. In it, you\nll tackle hands-on examples for building applications on CMIS repositories from both the client and the server sides. You\nll find working examples using the Apache Chemistry APIs for Java, Python, C#, Objective-C, and PHP, but you can use the techniques you\nll learn in this book to work with CMIS repositories using any language that can speak HTTP - including JavaScript.\n\n\n\n\n\n\n\nOpenCMIS\n\n\nOpenCMIS\n is a CMIS client library and a CMIS server framework for Java. It also provides developer tools such as the \nCMIS Workbench\n and the \nInMemory Repository\n. OpenCMIS runs on servers, desktops, and Android.\n\n\nThe code samples in this documentation cover the OpenCMIS client API. If you want to build a CMIS server with OpenCMIS, refer to the \nOpenCMIS Server Development Guide\n.\n\n\nTo get started with OpenCMIS, download the \nOpenCMIS client libraries\n or use Maven or Gradle to get the client libraries.\n\n\nMaven\n\n\nReplace \n[OpenCMIS version]\n with the latest version number, e.g. \n1.1.0\n.\n\n\ndependency\n\n    \ngroupId\norg.apache.chemistry.opencmis\n/groupId\n\n    \nartifactId\nchemistry-opencmis-client-impl\n/artifactId\n\n    \nversion\n[OpenCMIS version]\n/version\n\n\n/dependency\n\n\n\n\n\nFor Android:\n\n\ndependency\n\n    \ngroupId\norg.apache.chemistry.opencmis\n/groupId\n\n    \nartifactId\nchemistry-opencmis-android-client\n/artifactId\n\n    \nversion\n[OpenCMIS version]\n/version\n\n\n/dependency\n\n\n\n\n\nGradle\n\n\nReplace \n[OpenCMIS version]\n with the latest version number, e.g. \n1.1.0\n.\n\n\ncompile group: 'org.apache.chemistry.opencmis', name: 'chemistry-opencmis-client-impl', version: '[OpenCMIS version]'\n\n\n\n\nFor Android:\n\n\ncompile group: 'org.apache.chemistry.opencmis', name: 'chemistry-opencmis-android-client', version: '[OpenCMIS version]'\n\n\n\n\nPortCMIS\n\n\nPortCMIS\n is a CMIS client library for .Net. It is a Portable Class Library that runs on servers, desktops, and Windows Mobile.\n\n\nTo get started with PortCMIS, download the \nPortCMIS client binaries\n. You have the choice of either plain DLLs or NUPGK packages. It is also availabe on \nnuget\n:\n\n\nPM\n Install-Package PortCMIS \n\n\n\n\nDotCMIS\n\n\nDotCMIS\n is the predecessor of \nPortCMIS\n.\nThe APIs are very similar and most of the PortCMIS samples should also work with DotCMIS.\n\n\nThe high-level differences between DotCMIS and PortCMIS are described on \nthis page\n.\nFor new projects it is recommend to use PortCMIS.", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#apache-chemistry-cmis-code-samples", 
            "text": "CMIS (Content Management Interoperability Services)  is an OASIS standard enabling information sharing between different Content Management Systems.    This is a collection of code samples for     Apache Chemistry OpenCMIS  - a CMIS library for Java  Apache Chemistry PortCMIS  - a CMIS library for .Net   We assume that you have a rough understanding of CMIS. This is not a CMIS introduction course.  Many code samples are marked with  CMIS 1.0  or  CMIS 1.1 . Those tags indicate the CMIS specification version that the server has to support to use the feature.  Throughout the code samples you will find references to sections in the  CMIS 1.1 specification ; tags like  Spec 1.5 . We recommend that you have the specification document ready to hand.    Under Development  This sample collection is under development. Some areas are only sparely covered or not covered at all, yet.\nAlso some code samples lack a meaningful description. If you want help, please see the  about page .", 
            "title": "Apache Chemistry CMIS Code Samples"
        }, 
        {
            "location": "/index.html#apache-chemistry", 
            "text": "Apache Chemistry  provides open source client and server implementations of  CMIS 1.0  and  CMIS 1.1  for multiple programming languages (Java, .Net, Python, PHP, Objective-C, JavaScript,  ).     Do you want to know more about CMIS and Apache Chemistry?   The book  CMIS and Apache Chemistry in Action  is a comprehensive guide to the CMIS standard and related ECM concepts. In it, you ll tackle hands-on examples for building applications on CMIS repositories from both the client and the server sides. You ll find working examples using the Apache Chemistry APIs for Java, Python, C#, Objective-C, and PHP, but you can use the techniques you ll learn in this book to work with CMIS repositories using any language that can speak HTTP - including JavaScript.", 
            "title": "Apache Chemistry&trade;"
        }, 
        {
            "location": "/index.html#opencmis", 
            "text": "OpenCMIS  is a CMIS client library and a CMIS server framework for Java. It also provides developer tools such as the  CMIS Workbench  and the  InMemory Repository . OpenCMIS runs on servers, desktops, and Android.  The code samples in this documentation cover the OpenCMIS client API. If you want to build a CMIS server with OpenCMIS, refer to the  OpenCMIS Server Development Guide .  To get started with OpenCMIS, download the  OpenCMIS client libraries  or use Maven or Gradle to get the client libraries.", 
            "title": "OpenCMIS"
        }, 
        {
            "location": "/index.html#maven", 
            "text": "Replace  [OpenCMIS version]  with the latest version number, e.g.  1.1.0 .  dependency \n     groupId org.apache.chemistry.opencmis /groupId \n     artifactId chemistry-opencmis-client-impl /artifactId \n     version [OpenCMIS version] /version  /dependency   For Android:  dependency \n     groupId org.apache.chemistry.opencmis /groupId \n     artifactId chemistry-opencmis-android-client /artifactId \n     version [OpenCMIS version] /version  /dependency", 
            "title": "Maven"
        }, 
        {
            "location": "/index.html#gradle", 
            "text": "Replace  [OpenCMIS version]  with the latest version number, e.g.  1.1.0 .  compile group: 'org.apache.chemistry.opencmis', name: 'chemistry-opencmis-client-impl', version: '[OpenCMIS version]'  For Android:  compile group: 'org.apache.chemistry.opencmis', name: 'chemistry-opencmis-android-client', version: '[OpenCMIS version]'", 
            "title": "Gradle"
        }, 
        {
            "location": "/index.html#portcmis", 
            "text": "PortCMIS  is a CMIS client library for .Net. It is a Portable Class Library that runs on servers, desktops, and Windows Mobile.  To get started with PortCMIS, download the  PortCMIS client binaries . You have the choice of either plain DLLs or NUPGK packages. It is also availabe on  nuget :  PM  Install-Package PortCMIS", 
            "title": "PortCMIS"
        }, 
        {
            "location": "/index.html#dotcmis", 
            "text": "DotCMIS  is the predecessor of  PortCMIS .\nThe APIs are very similar and most of the PortCMIS samples should also work with DotCMIS.  The high-level differences between DotCMIS and PortCMIS are described on  this page .\nFor new projects it is recommend to use PortCMIS.", 
            "title": "DotCMIS"
        }, 
        {
            "location": "/samples/create-session/index.html", 
            "text": "Creating a Session\n\n\nA session is the entry point to the content repository. Creating a session is the first thing an application has to do to interact with the repository.\n\n\nA few details such as the URL of the repository endpoint, the user name and the user\ns credentials are necessary to establish a session.\nBeyond that more details might be required, depending on the repository and the environment. Those details are controlled by \nsession parameters\n.\n\n\nA complete list of all session parameters for OpenCMIS can be found in the \nJavaDoc\n. For PortCMIS, please refer to the help file that is contained in the binary packages.\n\n\nSession objects can be expensive to create and should be kept as long as possible. Most OpenCMIS and PortCMIS objects, including session objects, are \nthread safe\n. They can and should be reused across threads to reduce the number of calls to the repository.\n\n\nA session object manages a \nset of caches\n that keeps object metadata (properties values, Allowable Actions, ACL, etc.), paths information, and type metadata in memory. There is no content cache.\n\n\nThere is \nno fixed lifetime\n of a session object. It can be used for a long time. Only if the repository requires cookies that expire it may have to be recreated from time to time.\nThere is \nno need to close a session\n or clean its caches if you don\nt need it anymore. Just let the GC deal with it.\n\n\n\n\nWhich binding should I use?\n\n\nThe \nBrowser Binding\n is the fastest binding and is recommended for \nCMIS 1.1\n repositories.\n\nChoose the \nAtomPub Binding\n for \nCMIS 1.0\n repositories.\n\nThe Web Services Binding is the last resort and should be avoided. It is the slowest binding and is the most complex to set up.\n\n\n\n\nAtomPub Binding\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nOpenCMIS (Java)\n\n\n// default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap\nString, String\n parameters = new HashMap\nString, String\n();\n\n// user credentials\nparameters.put(SessionParameter.USER, \nOtto\n);\nparameters.put(SessionParameter.PASSWORD, \n****\n);\n\n// connection settings\nparameters.put(SessionParameter.ATOMPUB_URL, \nhttp://\nhost\n:\nport\n/cmis/atom\n);\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.ATOMPUB.value());\nparameters.put(SessionParameter.REPOSITORY_ID, \nmyRepository\n);\n\n// create session\nSession session = factory.createSession(parameters);\n\n\n\n\nPortCMIS (C#)\n\n\n// default factory implementation\nSessionFactory factory = SessionFactory.NewInstance();\nDictionary\nstring, string\n parameters = new Dictionary\nstring, string\n();\n\n// user credentials\nparameters[SessionParameter.User] = \nOtto\n;\nparameters[SessionParameter.Password] = \n****\n;\n\n// connection settings\nparameters[SessionParameter.AtomPubUrl] = \nhttp://\nhost\n:\nport\n/cmis/atom\n;\nparameters[SessionParameter.BindingType] = BindingType.AtomPub;\nparameters[SessionParameter.RepositoryId] = \nmyRepository\n;\n\n// create session\nISession session = factory.CreateSession(parameters);\n\n\n\n\nBrowser Binding\n\n\nCMIS 1.1\n\n\nOpenCMIS (Java)\n\n\n// default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap\nString, String\n parameters = new HashMap\nString, String\n();\n\n// user credentials\nparameters.put(SessionParameter.USER, \nOtto\n);\nparameters.put(SessionParameter.PASSWORD, \n****\n);\n\n// connection settings\nparameters.put(SessionParameter.BROWSER_URL, \nhttp://\nhost\n:\nport\n/cmis/browser\n);\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.BROWSER.value());\nparameters.put(SessionParameter.REPOSITORY_ID, \nmyRepository\n);\n\n// create session\nSession session = factory.createSession(parameters);\n\n\n\n\nPortCMIS (C#)\n\n\n// default factory implementation\nSessionFactory factory = SessionFactory.NewInstance();\nDictionary\nstring, string\n parameters = new Dictionary\nstring, string\n();\n\n// user credentials\nparameters[SessionParameter.User] = \nOtto\n;\nparameters[SessionParameter.Password] = \n****\n;\n\n// connection settings\nparameters[SessionParameter.BrowserUrl] = \nhttp://\nhost\n:\nport\n/cmis/browser\n;\nparameters[SessionParameter.BindingType] = BindingType.Browser;\nparameters[SessionParameter.RepositoryId] = \nmyRepository\n;\n\n// create session\nISession session = factory.CreateSession(parameters);\n\n\n\n\nWeb Services Binding\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nPortCMIS does not support the Web Service binding.\n\n\nOpenCMIS (Java)\n\n\n// default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap\nString, String\n parameters = new HashMap\nString, String\n();\n\n// user credentials\nparameters.put(SessionParameter.USER, \nOtto\n);\nparameters.put(SessionParameter.PASSWORD, \n****\n);\n\n// connection settings\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.WEBSERVICES.value());\nparameters.put(SessionParameter.WEBSERVICES_ACL_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/ACLService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_DISCOVERY_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/DiscoveryService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_MULTIFILING_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/MultiFilingService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_NAVIGATION_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/NavigationService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_OBJECT_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/ObjectService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_POLICY_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/PolicyService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_RELATIONSHIP_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/RelationshipService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_REPOSITORY_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/RepositoryService?wsdl\n);\nparameters.put(SessionParameter.WEBSERVICES_VERSIONING_SERVICE, \nhttp://\nhost\n:\nport\n/cmis/services/VersioningService?wsdl\n);\nparameters.put(SessionParameter.REPOSITORY_ID, \nmyRepository\n);\n\n// create session\nSession session = factory.createSession(parameters);\n\n\n\n\nLocal Binding\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nThe local binding is specific to OpenCMIS. It lets an OpenCMIS client connect to an OpenCMIS server in the same JVM.\nThere is no PortCMIS equivalent.\n\n\nOpenCMIS (Java)\n\n\n// default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap\nString, String\n parameters = new HashMap\nString, String\n();\n\n// user credentials\nparameters.put(SessionParameter.USER, \nOtto\n);\nparameters.put(SessionParameter.PASSWORD, \n****\n);\n\n// connection settings\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.LOCAL.value());\nparameters.put(SessionParameter.LOCAL_FACTORY, \nmy.local.factory\n);\nparameters.put(SessionParameter.REPOSITORY_ID, \nmyRepository\n);\n\n// create session\nSession session = factory.createSession(parameters);\n\n\n\n\nConnecting to the First Repository\n\n\nSome CMIS endpoints only provide one repository. In this case it is not necessary to provide its repository ID.\nThe following code snippet gets the list of all available repositories and connects to the first one.\n\n\nOpenCMIS (Java)\n\n\nSessionFactory factory = SessionFactoryImpl.newInstance();\nList\nRepository\n repositories = factory.getRepositories(parameters);\nSession session = repositories.get(0).createSession();\n\n\n\n\nPortCMIS (C#)\n\n\nSessionFactory factory = SessionFactory.NewInstance();\nISession session = factory.GetRepositories(parameters)[0].CreateSession();", 
            "title": "Creating a Session"
        }, 
        {
            "location": "/samples/create-session/index.html#creating-a-session", 
            "text": "A session is the entry point to the content repository. Creating a session is the first thing an application has to do to interact with the repository.  A few details such as the URL of the repository endpoint, the user name and the user s credentials are necessary to establish a session.\nBeyond that more details might be required, depending on the repository and the environment. Those details are controlled by  session parameters .  A complete list of all session parameters for OpenCMIS can be found in the  JavaDoc . For PortCMIS, please refer to the help file that is contained in the binary packages.  Session objects can be expensive to create and should be kept as long as possible. Most OpenCMIS and PortCMIS objects, including session objects, are  thread safe . They can and should be reused across threads to reduce the number of calls to the repository.  A session object manages a  set of caches  that keeps object metadata (properties values, Allowable Actions, ACL, etc.), paths information, and type metadata in memory. There is no content cache.  There is  no fixed lifetime  of a session object. It can be used for a long time. Only if the repository requires cookies that expire it may have to be recreated from time to time.\nThere is  no need to close a session  or clean its caches if you don t need it anymore. Just let the GC deal with it.   Which binding should I use?  The  Browser Binding  is the fastest binding and is recommended for  CMIS 1.1  repositories. \nChoose the  AtomPub Binding  for  CMIS 1.0  repositories. \nThe Web Services Binding is the last resort and should be avoided. It is the slowest binding and is the most complex to set up.", 
            "title": "Creating a Session"
        }, 
        {
            "location": "/samples/create-session/index.html#atompub-binding", 
            "text": "CMIS 1.0  CMIS 1.1  OpenCMIS (Java)  // default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap String, String  parameters = new HashMap String, String ();\n\n// user credentials\nparameters.put(SessionParameter.USER,  Otto );\nparameters.put(SessionParameter.PASSWORD,  **** );\n\n// connection settings\nparameters.put(SessionParameter.ATOMPUB_URL,  http:// host : port /cmis/atom );\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.ATOMPUB.value());\nparameters.put(SessionParameter.REPOSITORY_ID,  myRepository );\n\n// create session\nSession session = factory.createSession(parameters);  PortCMIS (C#)  // default factory implementation\nSessionFactory factory = SessionFactory.NewInstance();\nDictionary string, string  parameters = new Dictionary string, string ();\n\n// user credentials\nparameters[SessionParameter.User] =  Otto ;\nparameters[SessionParameter.Password] =  **** ;\n\n// connection settings\nparameters[SessionParameter.AtomPubUrl] =  http:// host : port /cmis/atom ;\nparameters[SessionParameter.BindingType] = BindingType.AtomPub;\nparameters[SessionParameter.RepositoryId] =  myRepository ;\n\n// create session\nISession session = factory.CreateSession(parameters);", 
            "title": "AtomPub Binding"
        }, 
        {
            "location": "/samples/create-session/index.html#browser-binding", 
            "text": "CMIS 1.1  OpenCMIS (Java)  // default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap String, String  parameters = new HashMap String, String ();\n\n// user credentials\nparameters.put(SessionParameter.USER,  Otto );\nparameters.put(SessionParameter.PASSWORD,  **** );\n\n// connection settings\nparameters.put(SessionParameter.BROWSER_URL,  http:// host : port /cmis/browser );\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.BROWSER.value());\nparameters.put(SessionParameter.REPOSITORY_ID,  myRepository );\n\n// create session\nSession session = factory.createSession(parameters);  PortCMIS (C#)  // default factory implementation\nSessionFactory factory = SessionFactory.NewInstance();\nDictionary string, string  parameters = new Dictionary string, string ();\n\n// user credentials\nparameters[SessionParameter.User] =  Otto ;\nparameters[SessionParameter.Password] =  **** ;\n\n// connection settings\nparameters[SessionParameter.BrowserUrl] =  http:// host : port /cmis/browser ;\nparameters[SessionParameter.BindingType] = BindingType.Browser;\nparameters[SessionParameter.RepositoryId] =  myRepository ;\n\n// create session\nISession session = factory.CreateSession(parameters);", 
            "title": "Browser Binding"
        }, 
        {
            "location": "/samples/create-session/index.html#web-services-binding", 
            "text": "CMIS 1.0  CMIS 1.1  PortCMIS does not support the Web Service binding.  OpenCMIS (Java)  // default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap String, String  parameters = new HashMap String, String ();\n\n// user credentials\nparameters.put(SessionParameter.USER,  Otto );\nparameters.put(SessionParameter.PASSWORD,  **** );\n\n// connection settings\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.WEBSERVICES.value());\nparameters.put(SessionParameter.WEBSERVICES_ACL_SERVICE,  http:// host : port /cmis/services/ACLService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_DISCOVERY_SERVICE,  http:// host : port /cmis/services/DiscoveryService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_MULTIFILING_SERVICE,  http:// host : port /cmis/services/MultiFilingService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_NAVIGATION_SERVICE,  http:// host : port /cmis/services/NavigationService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_OBJECT_SERVICE,  http:// host : port /cmis/services/ObjectService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_POLICY_SERVICE,  http:// host : port /cmis/services/PolicyService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_RELATIONSHIP_SERVICE,  http:// host : port /cmis/services/RelationshipService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_REPOSITORY_SERVICE,  http:// host : port /cmis/services/RepositoryService?wsdl );\nparameters.put(SessionParameter.WEBSERVICES_VERSIONING_SERVICE,  http:// host : port /cmis/services/VersioningService?wsdl );\nparameters.put(SessionParameter.REPOSITORY_ID,  myRepository );\n\n// create session\nSession session = factory.createSession(parameters);", 
            "title": "Web Services Binding"
        }, 
        {
            "location": "/samples/create-session/index.html#local-binding", 
            "text": "CMIS 1.0  CMIS 1.1  The local binding is specific to OpenCMIS. It lets an OpenCMIS client connect to an OpenCMIS server in the same JVM.\nThere is no PortCMIS equivalent.  OpenCMIS (Java)  // default factory implementation\nSessionFactory factory = SessionFactoryImpl.newInstance();\nMap String, String  parameters = new HashMap String, String ();\n\n// user credentials\nparameters.put(SessionParameter.USER,  Otto );\nparameters.put(SessionParameter.PASSWORD,  **** );\n\n// connection settings\nparameters.put(SessionParameter.BINDING_TYPE, BindingType.LOCAL.value());\nparameters.put(SessionParameter.LOCAL_FACTORY,  my.local.factory );\nparameters.put(SessionParameter.REPOSITORY_ID,  myRepository );\n\n// create session\nSession session = factory.createSession(parameters);", 
            "title": "Local Binding"
        }, 
        {
            "location": "/samples/create-session/index.html#connecting-to-the-first-repository", 
            "text": "Some CMIS endpoints only provide one repository. In this case it is not necessary to provide its repository ID.\nThe following code snippet gets the list of all available repositories and connects to the first one.  OpenCMIS (Java)  SessionFactory factory = SessionFactoryImpl.newInstance();\nList Repository  repositories = factory.getRepositories(parameters);\nSession session = repositories.get(0).createSession();  PortCMIS (C#)  SessionFactory factory = SessionFactory.NewInstance();\nISession session = factory.GetRepositories(parameters)[0].CreateSession();", 
            "title": "Connecting to the First Repository"
        }, 
        {
            "location": "/samples/capabilities/index.html", 
            "text": "Getting Repository Capabilities\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.1.1\n\n\nQuery Capability\n\n\nCheck whether the repository supports queries or not.\n\n\nOpenCMIS (Java)\n\n\nRepositoryInfo info = session.getRepositoryInfo();\n\nCapabilityQuery capabilityQuery = info.getCapabilities().getQueryCapability(); \nboolean supportsQuery = capabilityQuery != null \n capabilityQuery != CapabilityQuery.NONE;\n\n\n\n\nACL Capability\n\n\nCheck whether the repository supports ACLs or not.\n\n\nOpenCMIS (Java)\n\n\nRepositoryInfo info = session.getRepositoryInfo();\n\nCapabilityAcl capabilityAcl = info.getCapabilities().getAclCapability();\nboolean supportsAcls = capabilityAcl != null \n capabilityAcl != CapabilityAcl.NONE;\nboolean manageAcls = capabilityAcl == CapabilityAcl.MANAGE; // supports applyACL()\n\n\n\n\nMulti-Filing Capability\n\n\nCheck whether the repository supports multi-filing or not.\n\n\nOpenCMIS (Java)\n\n\nRepositoryInfo info = session.getRepositoryInfo();\n\nboolean supportsMultiFiling = Boolean.TRUE.equals(info.getCapabilities().isMultifilingSupported());\n\n\n\n\nUnfiling Capability\n\n\nCheck whether the repository supports unfiling or not.\n\n\nOpenCMIS (Java)\n\n\nRepositoryInfo info = session.getRepositoryInfo();\n\nboolean supportsUnfiling = Boolean.TRUE.equals(info.getCapabilities().isUnfilingSupported());", 
            "title": "Getting Repository Capabilities"
        }, 
        {
            "location": "/samples/capabilities/index.html#getting-repository-capabilities", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.1.1", 
            "title": "Getting Repository Capabilities"
        }, 
        {
            "location": "/samples/capabilities/index.html#query-capability", 
            "text": "Check whether the repository supports queries or not.  OpenCMIS (Java)  RepositoryInfo info = session.getRepositoryInfo();\n\nCapabilityQuery capabilityQuery = info.getCapabilities().getQueryCapability(); \nboolean supportsQuery = capabilityQuery != null   capabilityQuery != CapabilityQuery.NONE;", 
            "title": "Query Capability"
        }, 
        {
            "location": "/samples/capabilities/index.html#acl-capability", 
            "text": "Check whether the repository supports ACLs or not.  OpenCMIS (Java)  RepositoryInfo info = session.getRepositoryInfo();\n\nCapabilityAcl capabilityAcl = info.getCapabilities().getAclCapability();\nboolean supportsAcls = capabilityAcl != null   capabilityAcl != CapabilityAcl.NONE;\nboolean manageAcls = capabilityAcl == CapabilityAcl.MANAGE; // supports applyACL()", 
            "title": "ACL Capability"
        }, 
        {
            "location": "/samples/capabilities/index.html#multi-filing-capability", 
            "text": "Check whether the repository supports multi-filing or not.  OpenCMIS (Java)  RepositoryInfo info = session.getRepositoryInfo();\n\nboolean supportsMultiFiling = Boolean.TRUE.equals(info.getCapabilities().isMultifilingSupported());", 
            "title": "Multi-Filing Capability"
        }, 
        {
            "location": "/samples/capabilities/index.html#unfiling-capability", 
            "text": "Check whether the repository supports unfiling or not.  OpenCMIS (Java)  RepositoryInfo info = session.getRepositoryInfo();\n\nboolean supportsUnfiling = Boolean.TRUE.equals(info.getCapabilities().isUnfilingSupported());", 
            "title": "Unfiling Capability"
        }, 
        {
            "location": "/samples/types/index.html", 
            "text": "Working with Types\n\n\nGetting Type Definitions\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.3\n\n\nGetting a Specific Type Definition\n\n\nOpenCMIS (Java)\n\n\nObjectType type = session.getTypeDefinition(\ncmis:document\n);\n\nif (type instanceof DocumentType) {\n    DocumentType docType = (DocumentType) type;\n    boolean isVersionable = docType.isVersionable();\n} else if (type instanceof RelationshipType) {\n    RelationshipType relType = (RelationshipType) type;\n} else {\n    ...\n}\n\n\n\n\nPortCMIS (C#)\n\n\nIObjectType type = session.GetTypeDefinition(\ncmis:document\n);\n\nif (type is IDocumentType) {\n    IDocumentType docType = type as IDocumentType;\n    bool isVersionable = docType.Versionable;\n} else if (type is IRelationshipType) {\n    IRelationshipType relType = type as IRelationshipType;\n} else {\n    ...\n}\n\n\n\n\nChecking whether a Specific Type Definition Exists\n\n\nOpenCMIS (Java)\n\n\nboolean typeExists = true;\n\ntry {\n    session.getTypeDefinition(\nmy:Type\n);\n}\ncatch (CmisObjectNotFoundException e) {\n    typeExists = false;\n}\n\n\n\n\nPortCMIS (C#)\n\n\nbool typeExists = true;\n\ntry {\n    session.GetTypeDefinition(\nmy:Type\n);\n}\ncatch (CmisObjectNotFoundException) {\n    typeExists = false;\n}\n\n\n\n\nBrowsing Type Definitions\n\n\nCreating, Updating, and Deleting Types\n\n\nCMIS 1.1\n\n\nSpec 2.1.10\n\n\n\n\nReading and Writing Type Definitions\n\n\nThe class \nTypeUtils\n in OpenCMIS provides methods to read and write\ntype defintions from XML and JSON. It also offers methods to check whether\na type defintion is valid and complete.\n\n\n\n\nCreating a Type\n\n\nOpenCMIS (Java)\n\n\nTypeDefinition typeDef = ...\n\nObjectType createdType = session.createType(typeDef);\n\n\n\n\nPortCMIS (C#)\n\n\nITypeDefinition typeDef = ...\n\nIObjectType createdType = session.CreateType(typeDef);\n\n\n\n\nUpdating a Type\n\n\nOpenCMIS (Java)\n\n\nTypeDefinition typeDef = ...\n\nObjectType updatedType = session.updateType(typeDef);\n\n\n\n\nPortCMIS (C#)\n\n\nITypeDefinition typeDef = ...\n\nIObjectType updatedType = session.UpdateType(typeDef);\n\n\n\n\nDeleting a Type\n\n\nA type can only be deleted if no object of that type exists in the repository.\n\n\nOpenCMIS (Java)\n\n\nsession.deleteType(\nmy:uselessType\n);\n\n\n\n\nPortCMIS (C#)\n\n\nsession.DeleteType(\nmy:uselessType\n);", 
            "title": "Working with Types"
        }, 
        {
            "location": "/samples/types/index.html#working-with-types", 
            "text": "", 
            "title": "Working with Types"
        }, 
        {
            "location": "/samples/types/index.html#getting-type-definitions", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.3", 
            "title": "Getting Type Definitions"
        }, 
        {
            "location": "/samples/types/index.html#getting-a-specific-type-definition", 
            "text": "OpenCMIS (Java)  ObjectType type = session.getTypeDefinition( cmis:document );\n\nif (type instanceof DocumentType) {\n    DocumentType docType = (DocumentType) type;\n    boolean isVersionable = docType.isVersionable();\n} else if (type instanceof RelationshipType) {\n    RelationshipType relType = (RelationshipType) type;\n} else {\n    ...\n}  PortCMIS (C#)  IObjectType type = session.GetTypeDefinition( cmis:document );\n\nif (type is IDocumentType) {\n    IDocumentType docType = type as IDocumentType;\n    bool isVersionable = docType.Versionable;\n} else if (type is IRelationshipType) {\n    IRelationshipType relType = type as IRelationshipType;\n} else {\n    ...\n}", 
            "title": "Getting a Specific Type Definition"
        }, 
        {
            "location": "/samples/types/index.html#checking-whether-a-specific-type-definition-exists", 
            "text": "OpenCMIS (Java)  boolean typeExists = true;\n\ntry {\n    session.getTypeDefinition( my:Type );\n}\ncatch (CmisObjectNotFoundException e) {\n    typeExists = false;\n}  PortCMIS (C#)  bool typeExists = true;\n\ntry {\n    session.GetTypeDefinition( my:Type );\n}\ncatch (CmisObjectNotFoundException) {\n    typeExists = false;\n}", 
            "title": "Checking whether a Specific Type Definition Exists"
        }, 
        {
            "location": "/samples/types/index.html#browsing-type-definitions", 
            "text": "", 
            "title": "Browsing Type Definitions"
        }, 
        {
            "location": "/samples/types/index.html#creating-updating-and-deleting-types", 
            "text": "CMIS 1.1  Spec 2.1.10   Reading and Writing Type Definitions  The class  TypeUtils  in OpenCMIS provides methods to read and write\ntype defintions from XML and JSON. It also offers methods to check whether\na type defintion is valid and complete.", 
            "title": "Creating, Updating, and Deleting Types"
        }, 
        {
            "location": "/samples/types/index.html#creating-a-type", 
            "text": "OpenCMIS (Java)  TypeDefinition typeDef = ...\n\nObjectType createdType = session.createType(typeDef);  PortCMIS (C#)  ITypeDefinition typeDef = ...\n\nIObjectType createdType = session.CreateType(typeDef);", 
            "title": "Creating a Type"
        }, 
        {
            "location": "/samples/types/index.html#updating-a-type", 
            "text": "OpenCMIS (Java)  TypeDefinition typeDef = ...\n\nObjectType updatedType = session.updateType(typeDef);  PortCMIS (C#)  ITypeDefinition typeDef = ...\n\nIObjectType updatedType = session.UpdateType(typeDef);", 
            "title": "Updating a Type"
        }, 
        {
            "location": "/samples/types/index.html#deleting-a-type", 
            "text": "A type can only be deleted if no object of that type exists in the repository.  OpenCMIS (Java)  session.deleteType( my:uselessType );  PortCMIS (C#)  session.DeleteType( my:uselessType );", 
            "title": "Deleting a Type"
        }, 
        {
            "location": "/samples/exceptions/index.html", 
            "text": "Exceptions\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.2.1.4\n\n\nExceptions are divided into three groups: general exceptions, specific exceptions, and implementation exceptions.\n\nGeneral exceptions and specific exceptions are defined in the CMIS specification.\nImplementation exceptions are exceptions introduced by OpenCMIS and PortCMIS. Those exceptions handle connection and authentication problems.\n\n\nGeneral Exceptions\n\n\nGeneral exceptions may be returned by a repository in response to any CMIS service method call.\n\n\ninvalidArgument\n\n\nOne or more of the input parameters is missing or invalid.\n\n\nnotSupported\n\n\nThe CMIS operation is not supported by the repository.\n\n\nobjectNotFound\n\n\nThe object, or object type, or repository does not exist or the current user has no permission to see it.\n\n\npermissionDenied\n\n\nThe user does not have sufficient permissions to perform the operation.\n\n\nruntime\n\n\nAny other cause not expressible by another CMIS exception.\n\n\nSpecific Exceptions\n\n\nThe following exceptions may be returned by a repository in response to one or more CMIS service methods\ncalls.\n\n\nconstraint\n\n\nThe operation violates a repository- or object-level constraint defined in the CMIS domain model.\n\n\ncontentAlreadyExists\n\n\nThe operation attempts to set the content stream for a document that already has a content stream without explicitly specifying the \noverwriteFlag\n parameter.\n\n\nfilterNotValid\n\n\nThe property filter or rendition filter input to the operation is not valid.\n\n\nnameConstraintViolation\n\n\nThe repository is not able to store the object that the user is creating/updating due to a name constraint violation.\nThere could already be an object with the same name or the name contains a character that is not allowed.\n\n\nstorage\n\n\nThe repository is not able to store the object that the user is creating/updating due to an internal storage problem.\n\n\nstreamNotSupported\n\n\nThe operation is attempting to get or set a content stream for a document whose object type specifies that a content stream\nis not allowed for documents of that type.\n\n\nupdateConflict\n\n\nThe operation is attempting to update an object that is no longer current (as determined by the repository).\n\n\nversioning\n\n\nThe operation is attempting to perform an action on a non-current version of a document that cannot be performed on a non-current version.\n\n\nImplementation Exceptions\n\n\nbase\n\n\nThe OpenCMIS and PortCMIS exceptions are all derived from the CMIS base exception. If you want handle all CMIS exceptions at once, catch the \nCmisBaseException\n.\n\n\nconnection\n\n\nThe client could not connect to the repository for some reason. Check if you need to configure a proxy server.\n\n\nunauthorized\n\n\nUser authentication failed.\n\n\nproxyAuthentication\n\n\nProxy authentication failed.\n\n\nserviceUnavailable\n\n\nThe server reported that the CMIS service is currently not available.", 
            "title": "CMIS Exceptions"
        }, 
        {
            "location": "/samples/exceptions/index.html#exceptions", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.2.1.4  Exceptions are divided into three groups: general exceptions, specific exceptions, and implementation exceptions. \nGeneral exceptions and specific exceptions are defined in the CMIS specification.\nImplementation exceptions are exceptions introduced by OpenCMIS and PortCMIS. Those exceptions handle connection and authentication problems.", 
            "title": "Exceptions"
        }, 
        {
            "location": "/samples/exceptions/index.html#general-exceptions", 
            "text": "General exceptions may be returned by a repository in response to any CMIS service method call.", 
            "title": "General Exceptions"
        }, 
        {
            "location": "/samples/exceptions/index.html#invalidargument", 
            "text": "One or more of the input parameters is missing or invalid.", 
            "title": "invalidArgument"
        }, 
        {
            "location": "/samples/exceptions/index.html#notsupported", 
            "text": "The CMIS operation is not supported by the repository.", 
            "title": "notSupported"
        }, 
        {
            "location": "/samples/exceptions/index.html#objectnotfound", 
            "text": "The object, or object type, or repository does not exist or the current user has no permission to see it.", 
            "title": "objectNotFound"
        }, 
        {
            "location": "/samples/exceptions/index.html#permissiondenied", 
            "text": "The user does not have sufficient permissions to perform the operation.", 
            "title": "permissionDenied"
        }, 
        {
            "location": "/samples/exceptions/index.html#runtime", 
            "text": "Any other cause not expressible by another CMIS exception.", 
            "title": "runtime"
        }, 
        {
            "location": "/samples/exceptions/index.html#specific-exceptions", 
            "text": "The following exceptions may be returned by a repository in response to one or more CMIS service methods\ncalls.", 
            "title": "Specific Exceptions"
        }, 
        {
            "location": "/samples/exceptions/index.html#constraint", 
            "text": "The operation violates a repository- or object-level constraint defined in the CMIS domain model.", 
            "title": "constraint"
        }, 
        {
            "location": "/samples/exceptions/index.html#contentalreadyexists", 
            "text": "The operation attempts to set the content stream for a document that already has a content stream without explicitly specifying the  overwriteFlag  parameter.", 
            "title": "contentAlreadyExists"
        }, 
        {
            "location": "/samples/exceptions/index.html#filternotvalid", 
            "text": "The property filter or rendition filter input to the operation is not valid.", 
            "title": "filterNotValid"
        }, 
        {
            "location": "/samples/exceptions/index.html#nameconstraintviolation", 
            "text": "The repository is not able to store the object that the user is creating/updating due to a name constraint violation.\nThere could already be an object with the same name or the name contains a character that is not allowed.", 
            "title": "nameConstraintViolation"
        }, 
        {
            "location": "/samples/exceptions/index.html#storage", 
            "text": "The repository is not able to store the object that the user is creating/updating due to an internal storage problem.", 
            "title": "storage"
        }, 
        {
            "location": "/samples/exceptions/index.html#streamnotsupported", 
            "text": "The operation is attempting to get or set a content stream for a document whose object type specifies that a content stream\nis not allowed for documents of that type.", 
            "title": "streamNotSupported"
        }, 
        {
            "location": "/samples/exceptions/index.html#updateconflict", 
            "text": "The operation is attempting to update an object that is no longer current (as determined by the repository).", 
            "title": "updateConflict"
        }, 
        {
            "location": "/samples/exceptions/index.html#versioning", 
            "text": "The operation is attempting to perform an action on a non-current version of a document that cannot be performed on a non-current version.", 
            "title": "versioning"
        }, 
        {
            "location": "/samples/exceptions/index.html#implementation-exceptions", 
            "text": "", 
            "title": "Implementation Exceptions"
        }, 
        {
            "location": "/samples/exceptions/index.html#base", 
            "text": "The OpenCMIS and PortCMIS exceptions are all derived from the CMIS base exception. If you want handle all CMIS exceptions at once, catch the  CmisBaseException .", 
            "title": "base"
        }, 
        {
            "location": "/samples/exceptions/index.html#connection", 
            "text": "The client could not connect to the repository for some reason. Check if you need to configure a proxy server.", 
            "title": "connection"
        }, 
        {
            "location": "/samples/exceptions/index.html#unauthorized", 
            "text": "User authentication failed.", 
            "title": "unauthorized"
        }, 
        {
            "location": "/samples/exceptions/index.html#proxyauthentication", 
            "text": "Proxy authentication failed.", 
            "title": "proxyAuthentication"
        }, 
        {
            "location": "/samples/exceptions/index.html#serviceunavailable", 
            "text": "The server reported that the CMIS service is currently not available.", 
            "title": "serviceUnavailable"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html", 
            "text": "Retrieving Objects\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nGetting the Root Folder\n\n\nAll repositories have to provide a root folder. It\ns the entry point for \nbrowsing\n the repository content. The root folder might be completely empty and useless for repositories that only support \nunfiled\n objects.\n\n\nOpenCMIS (Java)\n\n\nFolder rootFolder = session.getRootFolder();\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder rootFolder = Session.GetRootFolder();\n\n\n\n\nGetting Objects by ID\n\n\nAll objects in a repository must have a unique object ID and can be retrieved by this ID. If the user has no permissions to see the object, an \nobjectNotFound\n exception is thrown.\n\n\nUse an \nOperation Context\n to define which details of the object should be returned.\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = session.getObject(id);\n\nif (cmisObject instanceof Document) {\n    Document document = (Document) cmisObject;\n} else if (cmisObject instanceof Folder) {\n    Folder folder = (Folder) cmisDocument;\n} else {\n    ...\n}\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = Session.GetObject(id);\n\nif (cmisObject is IDocument) {\n    IDocument document = cmisObject as IDocument;\n} else if (cmisObject is IFolder) {\n    IFolder folder = cmisDocument as IFolder;\n} else {\n    ...\n}\n\n\n\n\nGetting Objects by Path\n\n\nA \nfiled\n object has one or more paths and can be retrieved by this path. If the user has no permissions to see the object, an \nobjectNotFound\n exception is thrown.\n\n\nMost repositories use the \ncmis:name\n property of the folders and the object to assemble the path. But it is possible that the path segments don\u2019t match the names.\n\n\nUse an \nOperation Context\n to define which details of the object should be returned.\n\n\nOpenCMIS (Java)\n\n\nString path = \n/User Homes/customer1/document.odt\n;\nCmisObject cmisObject = session.getObjectByPath(path);\n\n// get the object ID\nString id = cmisObject.getId();\n\n// we know it is a filable object, we just retrieved it by path\nFileableCmisObject fileableCmisObject = (FileableCmisObject) cmisObject;\n\n// get all paths, there must be at least one\nList\nString\n paths = fileableCmisObject.getPaths();\n\n// get all parent folders, there must be at least one\nList\nFolder\n parents = fileableCmisObject.getParents();\n\n\n\n\nPortCMIS (C#)\n\n\nstring path = \n/User Homes/customer1/document.odt\n;\nICmisObject cmisObject = Session.GetObjectByPath(path);\n\n// get the object ID\nstring id = cmisObject.Id;\n\n// we know it is a filable object, we just retrieved it by path\nIFileableCmisObject fileableCmisObject = cmisObject as IFileableCmisObject;\n\n// get all paths, there must be at least one\nIList\nstring\n paths = fileableCmisObject.Paths;\n\n// get all parent folders, there must be at least one\nIList\nIFolder\n parents = fileableCmisObject.Parents;\n\n\n\n\nGetting Folder Children\n\n\nThe page about \nlists\n explains how paging works.\n\n\nUse an \nOperation Context\n to define which details of the objects should be returned.\n\n\nOpenCMIS (Java)\n\n\nFolder folder = ...\n\nfor (CmisObject child: folder.getChildren()) {\n    System.out.println(child.getName());\n}\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder folder = ...\n\nforeach (ICmisObject child in folder.GetChildren()) {\n    Console.WriteLine(child.Name);\n}\n\n\n\n\nUnderstanding the Object Cache\n\n\nBy default, OpenCMIS and PortCMIS cache objects. That is, the object returned by \ngetObject()\n or \ngetObjectbyPath()\n\ncan be stale. There are multiple ways to deal with that.\n\n\nRefresh the object data that is returned from \ngetObject()\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = session.getObject(id);\ncmisObject.refresh(); // contacts the repository and refreshes the object\ncmisObject.refreshIfOld(60 * 1000); // ... or refreshes the object only if the data is older than a minute\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = Session.GetObject(id);\ncmisObject.Refresh(); // contacts the repository and refreshes the object\ncmisObject.RefreshIfOld(60 * 1000); // ... or refreshes the object only if the data is older than a minute\n\n\n\n\nTurn off the session cache completely\n\n\nOpenCMIS (Java)\n\n\nsession.getDefaultContext().setCacheEnabled(false);\n\n\n\n\nPortCMIS (C#)\n\n\nSession.DefaultContext.CacheEnabled = false;\n\n\n\n\nTurn off caching for this \ngetObject()\n call\n\n\nSee also the page about the \nOperation Context\n.\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = session.createOperationContext();\noc.setCacheEnabled(false);\n\nCmisObject cmisObject = session.getObject(id, oc);\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = Session.CreateOperationContext();\noc.CacheEnabled = false;\n\nICmisObject cmisObject = Session.GetObject(id, oc);\n\n\n\n\nClear the session cache\n\n\nThis is not recommended!\n\n\nOpenCMIS (Java)\n\n\nsession.clear();\n\n\n\n\nPortCMIS (C#)\n\n\nSession.Clear();", 
            "title": "Retrieving Objects"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#retrieving-objects", 
            "text": "CMIS 1.0  CMIS 1.1", 
            "title": "Retrieving Objects"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#getting-the-root-folder", 
            "text": "All repositories have to provide a root folder. It s the entry point for  browsing  the repository content. The root folder might be completely empty and useless for repositories that only support  unfiled  objects.  OpenCMIS (Java)  Folder rootFolder = session.getRootFolder();  PortCMIS (C#)  IFolder rootFolder = Session.GetRootFolder();", 
            "title": "Getting the Root Folder"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#getting-objects-by-id", 
            "text": "All objects in a repository must have a unique object ID and can be retrieved by this ID. If the user has no permissions to see the object, an  objectNotFound  exception is thrown.  Use an  Operation Context  to define which details of the object should be returned.  OpenCMIS (Java)  CmisObject cmisObject = session.getObject(id);\n\nif (cmisObject instanceof Document) {\n    Document document = (Document) cmisObject;\n} else if (cmisObject instanceof Folder) {\n    Folder folder = (Folder) cmisDocument;\n} else {\n    ...\n}  PortCMIS (C#)  ICmisObject cmisObject = Session.GetObject(id);\n\nif (cmisObject is IDocument) {\n    IDocument document = cmisObject as IDocument;\n} else if (cmisObject is IFolder) {\n    IFolder folder = cmisDocument as IFolder;\n} else {\n    ...\n}", 
            "title": "Getting Objects by ID"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#getting-objects-by-path", 
            "text": "A  filed  object has one or more paths and can be retrieved by this path. If the user has no permissions to see the object, an  objectNotFound  exception is thrown.  Most repositories use the  cmis:name  property of the folders and the object to assemble the path. But it is possible that the path segments don\u2019t match the names.  Use an  Operation Context  to define which details of the object should be returned.  OpenCMIS (Java)  String path =  /User Homes/customer1/document.odt ;\nCmisObject cmisObject = session.getObjectByPath(path);\n\n// get the object ID\nString id = cmisObject.getId();\n\n// we know it is a filable object, we just retrieved it by path\nFileableCmisObject fileableCmisObject = (FileableCmisObject) cmisObject;\n\n// get all paths, there must be at least one\nList String  paths = fileableCmisObject.getPaths();\n\n// get all parent folders, there must be at least one\nList Folder  parents = fileableCmisObject.getParents();  PortCMIS (C#)  string path =  /User Homes/customer1/document.odt ;\nICmisObject cmisObject = Session.GetObjectByPath(path);\n\n// get the object ID\nstring id = cmisObject.Id;\n\n// we know it is a filable object, we just retrieved it by path\nIFileableCmisObject fileableCmisObject = cmisObject as IFileableCmisObject;\n\n// get all paths, there must be at least one\nIList string  paths = fileableCmisObject.Paths;\n\n// get all parent folders, there must be at least one\nIList IFolder  parents = fileableCmisObject.Parents;", 
            "title": "Getting Objects by Path"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#getting-folder-children", 
            "text": "The page about  lists  explains how paging works.  Use an  Operation Context  to define which details of the objects should be returned.  OpenCMIS (Java)  Folder folder = ...\n\nfor (CmisObject child: folder.getChildren()) {\n    System.out.println(child.getName());\n}  PortCMIS (C#)  IFolder folder = ...\n\nforeach (ICmisObject child in folder.GetChildren()) {\n    Console.WriteLine(child.Name);\n}", 
            "title": "Getting Folder Children"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#understanding-the-object-cache", 
            "text": "By default, OpenCMIS and PortCMIS cache objects. That is, the object returned by  getObject()  or  getObjectbyPath() \ncan be stale. There are multiple ways to deal with that.", 
            "title": "Understanding the Object Cache"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#refresh-the-object-data-that-is-returned-from-getobject", 
            "text": "OpenCMIS (Java)  CmisObject cmisObject = session.getObject(id);\ncmisObject.refresh(); // contacts the repository and refreshes the object\ncmisObject.refreshIfOld(60 * 1000); // ... or refreshes the object only if the data is older than a minute  PortCMIS (C#)  ICmisObject cmisObject = Session.GetObject(id);\ncmisObject.Refresh(); // contacts the repository and refreshes the object\ncmisObject.RefreshIfOld(60 * 1000); // ... or refreshes the object only if the data is older than a minute", 
            "title": "Refresh the object data that is returned from getObject()"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#turn-off-the-session-cache-completely", 
            "text": "OpenCMIS (Java)  session.getDefaultContext().setCacheEnabled(false);  PortCMIS (C#)  Session.DefaultContext.CacheEnabled = false;", 
            "title": "Turn off the session cache completely"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#turn-off-caching-for-this-getobject-call", 
            "text": "See also the page about the  Operation Context .  OpenCMIS (Java)  OperationContext oc = session.createOperationContext();\noc.setCacheEnabled(false);\n\nCmisObject cmisObject = session.getObject(id, oc);  PortCMIS (C#)  IOperationContext oc = Session.CreateOperationContext();\noc.CacheEnabled = false;\n\nICmisObject cmisObject = Session.GetObject(id, oc);", 
            "title": "Turn off caching for this getObject() call"
        }, 
        {
            "location": "/samples/retrieve-objects/index.html#clear-the-session-cache", 
            "text": "This is not recommended!  OpenCMIS (Java)  session.clear();  PortCMIS (C#)  Session.Clear();", 
            "title": "Clear the session cache"
        }, 
        {
            "location": "/samples/create-objects/index.html", 
            "text": "Creating Objects\n\n\nTo create an object a client has to provide a least the two properties \ncmis:name\n and \ncmis:objectTypeId\n.\n\n\ncmis:name\n sets the name of the object and \ncmis:objectTypeId\n sets its object type.\n\nDepending on the object type, more properties can be set or must be set. See also the page about \nproperties\n.\n\n\nCreating a Folder\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.5\n\n\nA folder is always a \nfiled\n object. That is, you always need a parent folder.\n\n\nOpenCMIS (Java)\n\n\nFolder parent = ....\n\n// prepare properties\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(PropertyIds.NAME, \na new folder\n);\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \ncmis:folder\n);\n\n// create the folder\nFolder newFolder = parent.createFolder(properties);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder parent = ....\n\n// prepare properties\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\nproperties[PropertyIds.Name] = \na new folder\n;\nproperties[PropertyIds.ObjectTypeId] = \ncmis:folder\n;\n\n// create the folder\nIFolder newFolder = parent.CreateFolder(properties);\n\n\n\n\nCreating a Document\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.4\n\n\nDocuments can be \nfiled\n and \nunfiled\n. The following samples show how to create a \nfiled\n document. Use the session object to create an \nunfiled\n document.\n\n\nSee also the \npage about content\n how to work with content streams.\n\n\nOpenCMIS (Java)\n\n\nFolder parent = ....\n\nString textFileName = \ntest.txt\n;\n\n// prepare content - a simple text file\nString content = \nHello World!\n;\n\nString filename = textFileName;\nString mimetype = \ntext/plain; charset=UTF-8\n;\n\nbyte[] contentBytes = content.getBytes(\nUTF-8\n);\nByteArrayInputStream stream = new ByteArrayInputStream(contentBytes);\n\nContentStream contentStream = session.getObjectFactory().createContentStream(filename, contentBytes.length, mimetype, stream);\n\n// prepare properties\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(PropertyIds.NAME, textFileName);\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \ncmis:document\n);\n\n// create the document\nDocument newDoc = parent.createDocument(properties, contentStream, VersioningState.NONE);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder parent = ....\n\nstring textFileName = \ntest.txt\n;\n\n// prepare content - a simple text file\nstring content = \nHello World!\n;\n\nstring filename = textFileName;\nstring mimetype = \ntext/plain; charset=UTF-8\n;\n\nbyte[] contentBytes = Encoding.UTF8.GetBytes(content);\nStream stream = new MemoryStream(contentBytes);\n\nIContentStream contentStream = session.ObjectFactory.CreateContentStream(filename, contentBytes.length, mimetype, stream);\n\n// prepare properties\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\nproperties[PropertyIds.Name] = textFileName;\nproperties[PropertyIds.ObjectTypeId] = \ncmis:document\n;\n\n// create the document\nIDocument newDoc = parent.CreateDocument(properties, contentStream, VersioningState.None);\n\n\n\n\nCreating a Documet from Source (Copy Content)\n\n\nOpenCMIS (Java)\n\n\nFolder folder = ...\nDocument doc = ...\n\ndoc.copy(folder); // create a copy of the document in this folder\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder folder = ...\nIDocument doc = ...\n\ndoc.Copy(folder); // create a copy of the document in this folder\n\n\n\n\nCreating a Relationship\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.6\n\n\nRelationships are always \nunfiled\n objects. The ID of the source object and the ID of the target object must be provided.\nSee the \npage about types\n how to discover relationship types and their properties.\n\n\nOpenCMIS (Java)\n\n\nString sourceId = ...\nString targetId = ...\n\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(PropertyIds.NAME, \na new relationship\n);\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \nmy:relationsip\n);\nproperties.put(PropertyIds.SOURCE_ID, sourceId);\nproperties.put(PropertyIds.TARGET_ID, targetId);\n\nObjectId newRelId = session.createRelationship(properties);\n\n\n\n\nPortCMIS (C#)\n\n\nstring sourceId = ...\nstring targetId = ...\n\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\nproperties[PropertyIds.Name] = \na new relationship\n;\nproperties[PropertyIds.ObjectTypeId] = \nmy:relationsip\n;\nproperties[PropertyIds.SourceId] = sourceId;\nproperties[PropertyIds.TargetId] = targetId;\n\nIObjectId newRelId = session.CreateRelationship(properties);\n\n\n\n\nCreating a Policy\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.7\n\n\nPolicies can be \nfiled\n and \nunfiled\n. The following samples show how to create a \nfiled\n policy. Use the session object to create an \nunfiled\n policy.\n\n\nIn most cases it doesn\nt make sense to create an policies of the type \ncmis:policy\n because it has no semantics. Usually, the repository provides specific policy types with or without additional properties. See the \npage about types\n how to discover policy types and their properties.\n\n\nOpenCMIS (Java)\n\n\nFolder parent = ....\n\n// prepare properties\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(PropertyIds.NAME, \na new policy\n);\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \nmy:policy\n);\nproperties.put(PropertyIds.POLICY_TEXT, \nmy policy description\n);\n\n// create the policy\nPolicy newPolicy = parent.createPolicy(properties);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder parent = ....\n\n// prepare properties\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\nproperties[PropertyIds.Name] = \na new policy\n;\nproperties[PropertyIds.ObjectTypeId] = \nmy:policy\n;\nproperties[PropertyIds.PolicyText] = \nmy policy description\n;\n\n// create the policy\nIPolicy newPolicy = parent.CreatePolicy(properties);\n\n\n\n\nCreating an Item\n\n\nCMIS 1.1\n\n\nSpec 2.1.8\n\n\nItems can be \nfiled\n and \nunfiled\n. The following samples show how to create a \nfiled\n item. Use the session object to create an \nunfiled\n item.\n\n\nIn most cases it doesn\nt make sense to create an item of the type \ncmis:item\n. Usually, the repository provides specific item types with or without additional properties. See the \npage about types\n how to discover item types and their properties.\n\n\nOpenCMIS (Java)\n\n\nFolder parent = ....\n\n// prepare properties\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(PropertyIds.NAME, \na new item\n);\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \nmy:item\n);\n\n// create the item\nItem newItem = parent.createItem(properties);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder parent = ....\n\n// prepare properties\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\nproperties[PropertyIds.Name] = \na new item\n;\nproperties[PropertyIds.ObjectTypeId] = \ncmis:item\n;\n\n// create the item\nIItem newItem = parent.CreateItem(properties);\n\n\n\n\nCreating object with a Folder Object vs Creating object with the Session Object\n\n\nOpenCMIS and PortCMIS provide two ways to create objects.\nThe code samples above create objects in a folder. It is also possible to create an object with the session object\nand without getting the parent folder first.\n\n\nOpenCMIS (Java)\n\n\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \ncmis:folder\n);\nproperties.put(PropertyIds.NAME, \na new folder\n);\n\nObjectId newFolderId = session.createFolder(properties, parentId);\n\n\n\n\nBoth approaches have advantages and disadvantages.\n\n\nCreating an object with a folder object is more convenient. The create methods return the newly created object.\n\n\nCreating an object with the session object is faster because it only needs one round-trip to the server. But it only returns the ID of the newly created object.\n\n\nUnfiled objects can only be created with the session object.", 
            "title": "Creating Objects"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-objects", 
            "text": "To create an object a client has to provide a least the two properties  cmis:name  and  cmis:objectTypeId .  cmis:name  sets the name of the object and  cmis:objectTypeId  sets its object type. \nDepending on the object type, more properties can be set or must be set. See also the page about  properties .", 
            "title": "Creating Objects"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-a-folder", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.5  A folder is always a  filed  object. That is, you always need a parent folder.  OpenCMIS (Java)  Folder parent = ....\n\n// prepare properties\nMap String, Object  properties = new HashMap String, Object ();\nproperties.put(PropertyIds.NAME,  a new folder );\nproperties.put(PropertyIds.OBJECT_TYPE_ID,  cmis:folder );\n\n// create the folder\nFolder newFolder = parent.createFolder(properties);  PortCMIS (C#)  IFolder parent = ....\n\n// prepare properties\nIDictionary string, object  properties = new Dictionary string, object ();\nproperties[PropertyIds.Name] =  a new folder ;\nproperties[PropertyIds.ObjectTypeId] =  cmis:folder ;\n\n// create the folder\nIFolder newFolder = parent.CreateFolder(properties);", 
            "title": "Creating a Folder"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-a-document", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.4  Documents can be  filed  and  unfiled . The following samples show how to create a  filed  document. Use the session object to create an  unfiled  document.  See also the  page about content  how to work with content streams.  OpenCMIS (Java)  Folder parent = ....\n\nString textFileName =  test.txt ;\n\n// prepare content - a simple text file\nString content =  Hello World! ;\n\nString filename = textFileName;\nString mimetype =  text/plain; charset=UTF-8 ;\n\nbyte[] contentBytes = content.getBytes( UTF-8 );\nByteArrayInputStream stream = new ByteArrayInputStream(contentBytes);\n\nContentStream contentStream = session.getObjectFactory().createContentStream(filename, contentBytes.length, mimetype, stream);\n\n// prepare properties\nMap String, Object  properties = new HashMap String, Object ();\nproperties.put(PropertyIds.NAME, textFileName);\nproperties.put(PropertyIds.OBJECT_TYPE_ID,  cmis:document );\n\n// create the document\nDocument newDoc = parent.createDocument(properties, contentStream, VersioningState.NONE);  PortCMIS (C#)  IFolder parent = ....\n\nstring textFileName =  test.txt ;\n\n// prepare content - a simple text file\nstring content =  Hello World! ;\n\nstring filename = textFileName;\nstring mimetype =  text/plain; charset=UTF-8 ;\n\nbyte[] contentBytes = Encoding.UTF8.GetBytes(content);\nStream stream = new MemoryStream(contentBytes);\n\nIContentStream contentStream = session.ObjectFactory.CreateContentStream(filename, contentBytes.length, mimetype, stream);\n\n// prepare properties\nIDictionary string, object  properties = new Dictionary string, object ();\nproperties[PropertyIds.Name] = textFileName;\nproperties[PropertyIds.ObjectTypeId] =  cmis:document ;\n\n// create the document\nIDocument newDoc = parent.CreateDocument(properties, contentStream, VersioningState.None);", 
            "title": "Creating a Document"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-a-documet-from-source-copy-content", 
            "text": "OpenCMIS (Java)  Folder folder = ...\nDocument doc = ...\n\ndoc.copy(folder); // create a copy of the document in this folder  PortCMIS (C#)  IFolder folder = ...\nIDocument doc = ...\n\ndoc.Copy(folder); // create a copy of the document in this folder", 
            "title": "Creating a Documet from Source (Copy Content)"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-a-relationship", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.6  Relationships are always  unfiled  objects. The ID of the source object and the ID of the target object must be provided.\nSee the  page about types  how to discover relationship types and their properties.  OpenCMIS (Java)  String sourceId = ...\nString targetId = ...\n\nMap String, Object  properties = new HashMap String, Object ();\nproperties.put(PropertyIds.NAME,  a new relationship );\nproperties.put(PropertyIds.OBJECT_TYPE_ID,  my:relationsip );\nproperties.put(PropertyIds.SOURCE_ID, sourceId);\nproperties.put(PropertyIds.TARGET_ID, targetId);\n\nObjectId newRelId = session.createRelationship(properties);  PortCMIS (C#)  string sourceId = ...\nstring targetId = ...\n\nIDictionary string, object  properties = new Dictionary string, object ();\nproperties[PropertyIds.Name] =  a new relationship ;\nproperties[PropertyIds.ObjectTypeId] =  my:relationsip ;\nproperties[PropertyIds.SourceId] = sourceId;\nproperties[PropertyIds.TargetId] = targetId;\n\nIObjectId newRelId = session.CreateRelationship(properties);", 
            "title": "Creating a Relationship"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-a-policy", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.7  Policies can be  filed  and  unfiled . The following samples show how to create a  filed  policy. Use the session object to create an  unfiled  policy.  In most cases it doesn t make sense to create an policies of the type  cmis:policy  because it has no semantics. Usually, the repository provides specific policy types with or without additional properties. See the  page about types  how to discover policy types and their properties.  OpenCMIS (Java)  Folder parent = ....\n\n// prepare properties\nMap String, Object  properties = new HashMap String, Object ();\nproperties.put(PropertyIds.NAME,  a new policy );\nproperties.put(PropertyIds.OBJECT_TYPE_ID,  my:policy );\nproperties.put(PropertyIds.POLICY_TEXT,  my policy description );\n\n// create the policy\nPolicy newPolicy = parent.createPolicy(properties);  PortCMIS (C#)  IFolder parent = ....\n\n// prepare properties\nIDictionary string, object  properties = new Dictionary string, object ();\nproperties[PropertyIds.Name] =  a new policy ;\nproperties[PropertyIds.ObjectTypeId] =  my:policy ;\nproperties[PropertyIds.PolicyText] =  my policy description ;\n\n// create the policy\nIPolicy newPolicy = parent.CreatePolicy(properties);", 
            "title": "Creating a Policy"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-an-item", 
            "text": "CMIS 1.1  Spec 2.1.8  Items can be  filed  and  unfiled . The following samples show how to create a  filed  item. Use the session object to create an  unfiled  item.  In most cases it doesn t make sense to create an item of the type  cmis:item . Usually, the repository provides specific item types with or without additional properties. See the  page about types  how to discover item types and their properties.  OpenCMIS (Java)  Folder parent = ....\n\n// prepare properties\nMap String, Object  properties = new HashMap String, Object ();\nproperties.put(PropertyIds.NAME,  a new item );\nproperties.put(PropertyIds.OBJECT_TYPE_ID,  my:item );\n\n// create the item\nItem newItem = parent.createItem(properties);  PortCMIS (C#)  IFolder parent = ....\n\n// prepare properties\nIDictionary string, object  properties = new Dictionary string, object ();\nproperties[PropertyIds.Name] =  a new item ;\nproperties[PropertyIds.ObjectTypeId] =  cmis:item ;\n\n// create the item\nIItem newItem = parent.CreateItem(properties);", 
            "title": "Creating an Item"
        }, 
        {
            "location": "/samples/create-objects/index.html#creating-object-with-a-folder-object-vs-creating-object-with-the-session-object", 
            "text": "OpenCMIS and PortCMIS provide two ways to create objects.\nThe code samples above create objects in a folder. It is also possible to create an object with the session object\nand without getting the parent folder first.  OpenCMIS (Java)  Map String, Object  properties = new HashMap String, Object ();\nproperties.put(PropertyIds.OBJECT_TYPE_ID,  cmis:folder );\nproperties.put(PropertyIds.NAME,  a new folder );\n\nObjectId newFolderId = session.createFolder(properties, parentId);  Both approaches have advantages and disadvantages.  Creating an object with a folder object is more convenient. The create methods return the newly created object.  Creating an object with the session object is faster because it only needs one round-trip to the server. But it only returns the ID of the newly created object.  Unfiled objects can only be created with the session object.", 
            "title": "Creating object with a Folder Object vs Creating object with the Session Object"
        }, 
        {
            "location": "/samples/update-objects/index.html", 
            "text": "Updating Objects\n\n\nUpdating Properties\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nThe page about \nproperties\n explains how Java and C# data types are map to CMIS data types.\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = ...\n\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\n\nproperties.put(\nmy:property\n, \nnew value\n); // single-value property\nproperties.put(\nmy:int.property\n, 42);\nproperties.put(\nmy:date.property\n, new GregorianCalendar());\nproperties.put(\nmy:bool.property\n, true);\n\nList\nString\n shoppingList = new ArrayList\nString\n();\nshoppingList.add(\nmilk\n);\nshoppingList.add(\nbread\n);\nshoppingList.add(\ncheese\n);\nproperties.put(\nmy:shopping.list\n, shoppingList); // multi-value property\n\ncmisObject.updateProperties(properties);\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = ...\n\nIDictonary\nstring, object\n properties = new Dictonary\nstring, object\n();\n\nproperties.Add(\nmy:property\n, \nnew value\n); // single-value property\nproperties.Add(\nmy:int.property\n, 42);\nproperties.Add(\nmy:date.property\n, DateTime.Now);\nproperties.Add(\nmy:bool.property\n, true);\n\nIList\nstring\n shoppingList = new List\nstring\n();\nshoppingList.Add(\nmilk\n);\nshoppingList.Add(\nbread\n);\nshoppingList.Add(\ncheese\n);\nproperties.Add(\nmy:shopping.list\n, shoppingList); // multi-value property\n\ncmisObject.UpdateProperties(properties);\n\n\n\n\nRenaming an Object\n\n\nIf you just want to change the \ncmis:name\n property, there is a shortcut.\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = ....\ncmisObject.rename(\nnew name\n);\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = ....\ncmisObject.Rename(\nnew name\n);\n\n\n\n\nBulk Update\n\n\nCMIS 1.1\n\n\nOpenCMIS (Java)\n\n\n// collect all objects to be updated\nList\nCmisObject\n objectList = new ArrayList\nCmisObject\n();\nobjectList.add(doc1);\nobjectList.add(doc2);\nobjectList.add(doc3);\n\n// prepare properties\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(\nmy:project\n, \n123456\n);\nproperties.put(\nmy:priority\n, 10);\n\nList\nBulkUpdateObjectIdAndChangeToken\n updatedIds = session.bulkUpdateProperties(objectList, properties, null, null);\n\n\n\n\nUpdating Content\n\n\nSee \nWorking with Content\n.", 
            "title": "Updating Objects"
        }, 
        {
            "location": "/samples/update-objects/index.html#updating-objects", 
            "text": "", 
            "title": "Updating Objects"
        }, 
        {
            "location": "/samples/update-objects/index.html#updating-properties", 
            "text": "CMIS 1.0  CMIS 1.1  The page about  properties  explains how Java and C# data types are map to CMIS data types.  OpenCMIS (Java)  CmisObject cmisObject = ...\n\nMap String, Object  properties = new HashMap String, Object ();\n\nproperties.put( my:property ,  new value ); // single-value property\nproperties.put( my:int.property , 42);\nproperties.put( my:date.property , new GregorianCalendar());\nproperties.put( my:bool.property , true);\n\nList String  shoppingList = new ArrayList String ();\nshoppingList.add( milk );\nshoppingList.add( bread );\nshoppingList.add( cheese );\nproperties.put( my:shopping.list , shoppingList); // multi-value property\n\ncmisObject.updateProperties(properties);  PortCMIS (C#)  ICmisObject cmisObject = ...\n\nIDictonary string, object  properties = new Dictonary string, object ();\n\nproperties.Add( my:property ,  new value ); // single-value property\nproperties.Add( my:int.property , 42);\nproperties.Add( my:date.property , DateTime.Now);\nproperties.Add( my:bool.property , true);\n\nIList string  shoppingList = new List string ();\nshoppingList.Add( milk );\nshoppingList.Add( bread );\nshoppingList.Add( cheese );\nproperties.Add( my:shopping.list , shoppingList); // multi-value property\n\ncmisObject.UpdateProperties(properties);", 
            "title": "Updating Properties"
        }, 
        {
            "location": "/samples/update-objects/index.html#renaming-an-object", 
            "text": "If you just want to change the  cmis:name  property, there is a shortcut.  OpenCMIS (Java)  CmisObject cmisObject = ....\ncmisObject.rename( new name );  PortCMIS (C#)  ICmisObject cmisObject = ....\ncmisObject.Rename( new name );", 
            "title": "Renaming an Object"
        }, 
        {
            "location": "/samples/update-objects/index.html#bulk-update", 
            "text": "CMIS 1.1  OpenCMIS (Java)  // collect all objects to be updated\nList CmisObject  objectList = new ArrayList CmisObject ();\nobjectList.add(doc1);\nobjectList.add(doc2);\nobjectList.add(doc3);\n\n// prepare properties\nMap String, Object  properties = new HashMap String, Object ();\nproperties.put( my:project ,  123456 );\nproperties.put( my:priority , 10);\n\nList BulkUpdateObjectIdAndChangeToken  updatedIds = session.bulkUpdateProperties(objectList, properties, null, null);", 
            "title": "Bulk Update"
        }, 
        {
            "location": "/samples/update-objects/index.html#updating-content", 
            "text": "See  Working with Content .", 
            "title": "Updating Content"
        }, 
        {
            "location": "/samples/move-objects/index.html", 
            "text": "Moving Objects\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nMoving Between Folders\n\n\nOpenCMIS (Java)\n\n\nFolder sourceFolder = ...\nFolder targetFolder = ...\nDocument doc = ...\n\ndoc.move(sourceFolder, targetFolder);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder sourceFolder = ...\nIFolder targetFolder = ...\nIDocument doc = ...\n\ndoc.Move(sourceFolder, targetFolder);\n\n\n\n\nAdding and Removing from Folder\n\n\nAdding to Folder\n\n\nOpenCMIS (Java)\n\n\nFolder folder = ...\nDocument doc = ...\n\ndoc.addToFolder(folder, true); // add all versions to folder\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder folder = ...\nIDocument doc = ...\n\ndoc.AddToFolder(folder, true); // add all versions to folder\n\n\n\n\nRemoving from Folder\n\n\nOpenCMIS (Java)\n\n\nFolder folder = ...\nDocument doc = ...\n\ndoc.removeFromFolder(folder);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder folder = ...\nIDocument doc = ...\n\ndoc.RemoveFromFolder(folder);", 
            "title": "Moving Object"
        }, 
        {
            "location": "/samples/move-objects/index.html#moving-objects", 
            "text": "CMIS 1.0  CMIS 1.1", 
            "title": "Moving Objects"
        }, 
        {
            "location": "/samples/move-objects/index.html#moving-between-folders", 
            "text": "OpenCMIS (Java)  Folder sourceFolder = ...\nFolder targetFolder = ...\nDocument doc = ...\n\ndoc.move(sourceFolder, targetFolder);  PortCMIS (C#)  IFolder sourceFolder = ...\nIFolder targetFolder = ...\nIDocument doc = ...\n\ndoc.Move(sourceFolder, targetFolder);", 
            "title": "Moving Between Folders"
        }, 
        {
            "location": "/samples/move-objects/index.html#adding-and-removing-from-folder", 
            "text": "", 
            "title": "Adding and Removing from Folder"
        }, 
        {
            "location": "/samples/move-objects/index.html#adding-to-folder", 
            "text": "OpenCMIS (Java)  Folder folder = ...\nDocument doc = ...\n\ndoc.addToFolder(folder, true); // add all versions to folder  PortCMIS (C#)  IFolder folder = ...\nIDocument doc = ...\n\ndoc.AddToFolder(folder, true); // add all versions to folder", 
            "title": "Adding to Folder"
        }, 
        {
            "location": "/samples/move-objects/index.html#removing-from-folder", 
            "text": "OpenCMIS (Java)  Folder folder = ...\nDocument doc = ...\n\ndoc.removeFromFolder(folder);  PortCMIS (C#)  IFolder folder = ...\nIDocument doc = ...\n\ndoc.RemoveFromFolder(folder);", 
            "title": "Removing from Folder"
        }, 
        {
            "location": "/samples/delete-objects/index.html", 
            "text": "Deleting Objects\n\n\n\n\nAllowable Actions\n\n\nBefore you delete an object, check the \nAllowable Actions\n to determine if the\ncurrent user is allowed to delete the object.\n\n\n\n\nDeleting Objects\n\n\nThe following snippet deletes an object.\nIf the object is a document, all versions of the document are deleted.\nIf the object is a folder and it is not empty, a \nconstraint\n exception is thrown.\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = ...\ncmisObject.delete();\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = ...\ncmisObject.Delete();\n\n\n\n\nDeleting Documents and Versions\n\n\nIf a document is versioned, the whole version series can be deleted or just a single version. This is controlled with the \nallVersions\n parameter.\n\n\nFor documents that are not versioned it doesn\nt matter if the \nallVersions\n parameter is set to \ntrue\n or \nfalse\n.\n\n\nDeleting a Document and All Versions\n\n\nTo delete a whole version series, set the \nallVersions\n to \ntrue\n.\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\ndocument.delete(true); // allVersions = true\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\ndocument.Delete(true); // allVersions = true\n\n\n\n\nDeleting a Single Version\n\n\nTo delete one version with a version series, set the \nallVersions\n to \nfalse\n.\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\ndocument.delete(false); // allVersions = false\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\ndocument.Delete(false); // allVersions = false\n\n\n\n\nDeleting a Folder Hierarchy\n\n\nOpenCMIS (Java)\n\n\nFolder folder = ...\nfolder.deleteTree(true, UnfileObject.DELETE, true);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder folder = ...\nfolder.DeleteTree(true, UnfileObject.Delete, true);", 
            "title": "Deleting Objects"
        }, 
        {
            "location": "/samples/delete-objects/index.html#deleting-objects", 
            "text": "Allowable Actions  Before you delete an object, check the  Allowable Actions  to determine if the\ncurrent user is allowed to delete the object.", 
            "title": "Deleting Objects"
        }, 
        {
            "location": "/samples/delete-objects/index.html#deleting-objects_1", 
            "text": "The following snippet deletes an object.\nIf the object is a document, all versions of the document are deleted.\nIf the object is a folder and it is not empty, a  constraint  exception is thrown.  OpenCMIS (Java)  CmisObject cmisObject = ...\ncmisObject.delete();  PortCMIS (C#)  ICmisObject cmisObject = ...\ncmisObject.Delete();", 
            "title": "Deleting Objects"
        }, 
        {
            "location": "/samples/delete-objects/index.html#deleting-documents-and-versions", 
            "text": "If a document is versioned, the whole version series can be deleted or just a single version. This is controlled with the  allVersions  parameter.  For documents that are not versioned it doesn t matter if the  allVersions  parameter is set to  true  or  false .", 
            "title": "Deleting Documents and Versions"
        }, 
        {
            "location": "/samples/delete-objects/index.html#deleting-a-document-and-all-versions", 
            "text": "To delete a whole version series, set the  allVersions  to  true .  OpenCMIS (Java)  Document document = ...\ndocument.delete(true); // allVersions = true  PortCMIS (C#)  IDocument document = ...\ndocument.Delete(true); // allVersions = true", 
            "title": "Deleting a Document and All Versions"
        }, 
        {
            "location": "/samples/delete-objects/index.html#deleting-a-single-version", 
            "text": "To delete one version with a version series, set the  allVersions  to  false .  OpenCMIS (Java)  Document document = ...\ndocument.delete(false); // allVersions = false  PortCMIS (C#)  IDocument document = ...\ndocument.Delete(false); // allVersions = false", 
            "title": "Deleting a Single Version"
        }, 
        {
            "location": "/samples/delete-objects/index.html#deleting-a-folder-hierarchy", 
            "text": "OpenCMIS (Java)  Folder folder = ...\nfolder.deleteTree(true, UnfileObject.DELETE, true);  PortCMIS (C#)  IFolder folder = ...\nfolder.DeleteTree(true, UnfileObject.Delete, true);", 
            "title": "Deleting a Folder Hierarchy"
        }, 
        {
            "location": "/samples/content/index.html", 
            "text": "Working with Content\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.4.2\n\n\nContent Streams\n\n\nContent Stream objects are used to send and fetch content. They contain a file name, a \nMIME type\n, the stream length, and the stream.\n\n\nIn some cases, the stream length is unknown (\nnull\n). OpenCMIS and PortCMIS don\u2019t rely on it and your application shouldn\nt either. \n\n\nYou can create content stream objects manually or implement the interface yourself, but OpenCMIS and PortCMIS provide some convenience methods for this.\n\n\nOpenCMIS (Java)\n\n\n// create a simple ContentStream object\nContentStream cs1 = session.getObjectFactory().createContentStream(filename, length, mimeType, stream);\n\n// create a ContentStream object from a byte array\nContentStream cs2 = ContentStreamUtils.createByteArrayContentStream(filename, bytes, mimeType);\n\n// create a ContentStream object from a string\nContentStream cs3 = ContentStreamUtils.createTextContentStream(filename, content);\n\n// create a ContentStream object from file\nContentStream cs4 = ContentStreamUtils.createFileContentStream(file);\n\n\n\n\nPortCMIS (C#)\n\n\n// create a simple IContentStream object\nIContentStream cs1 = Session.ObjectFactory.CreateContentStream(filename, length, mimeType, stream);\n\n// create a IContentStream object from a byte array\nIContentStream cs2 = ContentStreamUtils.CreateByteArrayContentStream(filename, bytes, mimeType);\n\n// create a IContentStream object from a string\nIContentStream cs3 = ContentStreamUtils.CreateTextContentStream(filename, content);\n\n\n\n\nMIME Types\n\n\nWhen you create a new document or update the content of a document, you have to provide a MIME type.\nIf you don\nt know the MIME type, use \napplication/octet-stream\n.\n\n\nOpenCMIS can guess the MIME type based on the file extension.\nIf you need a more thorough MIME type detection, have a look at \nApache Tika\n.\n\n\nOpenCMIS (Java)\n\n\nString mimeType = MimeTypes.getMIMEType(\ntxt\n); // MIME type for a .txt file\n\n\n\n\nFor .Net 4.5+ you can use \nSystem.Web.MimeMapping.GetMimeMapping\n.\n\n\nPortCMIS (C#)\n\n\nstring mimeType = MimeMapping.GetMimeMapping(\ntext.txt\n);\n\n\n\n\nGetting Content\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nThe code snippets below show how to get the content of document.\n\n\n\n\nNote\n\n\nCMIS differentiates between documents with no content and documents with a content of 0 bytes.\n\nIf a document has no content, \ngetContentStream()\n returns \nnull\n. If a document has a 0 byte content, \ngetContentStream()\n returns a content stream object with an empty stream.\n\n\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\nContentStream contentStream = document.getContentStream();\nInputStream stream = contentStream.getStream();\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\nIContentStream contentStream = document.GetContentStream();\nStream stream = contentStream.Stream;\n\n\n\n\nGetting Partial Content\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nIt\ns also possible to get only a part of the content.\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\n// skip the first 100 bytes\n// use null to start from the beginning\nBigInteger offset = BigInteger.valueOf(100);\n\n// only read 200 bytes\n// use null to read to the end of the stream\nBigInteger length = BigInteger.valueOf(200); \n\nContentStream contentStream = document.getContentStream(offset, length);\nInputStream stream = contentStream.getStream();\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\n\n// skip the first 100 bytes\n// use null to start from the beginning\nlong? offset = 100;\n\n// only read 200 bytes\n// use null to read to the end of the stream\nlong? length = 200;\n\nIContentStream contentStream = document.GetContentStream(offset, length);\nStream stream = contentStream.Stream;\n\n\n\n\nGetting a Content URL\n\n\nThe AtomPub Binding and the Browser Binding can provide a URL to the content of a document. Depending on the repository and the binding, the server might not return the content but an error message because this URL does not include authentication data. A user may have to re-authenticate to get the content.\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\nString link = document.getContentUrl();\n\n\n\n\nUpdating Content\n\n\nOverwriting Content\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\nContentStream contentStream = ...\n\ndocument.setContentStream(contentStream, true);\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\n\nIContentStream contentStream = ...\n\ndocument.SetContentStream(contentStream, true);\n\n\n\n\nDeleting Content\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\n\n\nWarning\n\n\nSome repositories  don\nt support documents without content. Check the \nrepository capabilities\n if that\ns the case or check the\n\nAllowable Actions\n of the document.\n\n\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\ndocument.deleteContentStream();\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\ndocument.DeleteContentStream();\n\n\n\n\nAppending Content\n\n\nCMIS 1.1\n\n\n\n\nWarning\n\n\nNot all repositories support appending content. It is not possible to discover wheter a repository supports it or not.\nIf you append content be prepared to catch a \nnotSupported\n exception. \n\n\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\nContentStream contentStream = ...\nboolean isLastChunk = true; // indicates that this is the last part of the content \n\ndocument.appendContentStream(contentStream, isLastChunk);\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\n\nIContentStream contentStream = ...\nbool isLastChunk = true; // indicates that this is the last part of the content \n\ndocument.AppendContentStream(contentStream, isLastChunk);\n\n\n\n\nWorking with Renditions\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.4.2\n\n\nRenditions are alternative versions of a document. For example, a rendition could be a PDF of an Office document. Thumbnails are a special kind of renditions and could also exist for non-document objects.\n\nCMIS only supports server managed renditions. A CMIS client cannot upload, modify, or delete a rendition.\n\n\nGetting the List of Renditions\n\n\n\n\nNote\n\n\nThe list of renditions is only available if it has been requested with an \nOperation Context\n.\n\n\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\nfor (Rendition rendition: document.getRenditions()) {\n    System.out.println(rendition.getTitle() + \n: \n + rendition.getStreamId());\n}\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\n\nforeach (IRendition rendition in folder.Renditions) {\n    Console.WriteLine(rendition.Title + \n: \n + rendition.StreamId);\n}\n\n\n\n\nGetting Rendition Content\n\n\nThe rendition content can be retrieved either for an Rendition object (see above) or directly from the document with a stream ID.\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\nRendition rendition = ...\n\nContentStream cs1 = document.getContentStream(rendition.getStreamId());\n\nContentStream cs2 = rendition.getContentStream();\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\nIRendition rendition = ...\n\nIContentStream cs1 = document.GetContentStream(rendition.StreamId);\n\nIContentStream cs2 = rendition.GetContentStream();", 
            "title": "Working with Content"
        }, 
        {
            "location": "/samples/content/index.html#working-with-content", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.4.2", 
            "title": "Working with Content"
        }, 
        {
            "location": "/samples/content/index.html#content-streams", 
            "text": "Content Stream objects are used to send and fetch content. They contain a file name, a  MIME type , the stream length, and the stream.  In some cases, the stream length is unknown ( null ). OpenCMIS and PortCMIS don\u2019t rely on it and your application shouldn t either.   You can create content stream objects manually or implement the interface yourself, but OpenCMIS and PortCMIS provide some convenience methods for this.  OpenCMIS (Java)  // create a simple ContentStream object\nContentStream cs1 = session.getObjectFactory().createContentStream(filename, length, mimeType, stream);\n\n// create a ContentStream object from a byte array\nContentStream cs2 = ContentStreamUtils.createByteArrayContentStream(filename, bytes, mimeType);\n\n// create a ContentStream object from a string\nContentStream cs3 = ContentStreamUtils.createTextContentStream(filename, content);\n\n// create a ContentStream object from file\nContentStream cs4 = ContentStreamUtils.createFileContentStream(file);  PortCMIS (C#)  // create a simple IContentStream object\nIContentStream cs1 = Session.ObjectFactory.CreateContentStream(filename, length, mimeType, stream);\n\n// create a IContentStream object from a byte array\nIContentStream cs2 = ContentStreamUtils.CreateByteArrayContentStream(filename, bytes, mimeType);\n\n// create a IContentStream object from a string\nIContentStream cs3 = ContentStreamUtils.CreateTextContentStream(filename, content);", 
            "title": "Content Streams"
        }, 
        {
            "location": "/samples/content/index.html#mime-types", 
            "text": "When you create a new document or update the content of a document, you have to provide a MIME type.\nIf you don t know the MIME type, use  application/octet-stream .  OpenCMIS can guess the MIME type based on the file extension.\nIf you need a more thorough MIME type detection, have a look at  Apache Tika .  OpenCMIS (Java)  String mimeType = MimeTypes.getMIMEType( txt ); // MIME type for a .txt file  For .Net 4.5+ you can use  System.Web.MimeMapping.GetMimeMapping .  PortCMIS (C#)  string mimeType = MimeMapping.GetMimeMapping( text.txt );", 
            "title": "MIME Types"
        }, 
        {
            "location": "/samples/content/index.html#getting-content", 
            "text": "CMIS 1.0  CMIS 1.1  The code snippets below show how to get the content of document.   Note  CMIS differentiates between documents with no content and documents with a content of 0 bytes. \nIf a document has no content,  getContentStream()  returns  null . If a document has a 0 byte content,  getContentStream()  returns a content stream object with an empty stream.   OpenCMIS (Java)  Document document = ...\nContentStream contentStream = document.getContentStream();\nInputStream stream = contentStream.getStream();  PortCMIS (C#)  IDocument document = ...\nIContentStream contentStream = document.GetContentStream();\nStream stream = contentStream.Stream;", 
            "title": "Getting Content"
        }, 
        {
            "location": "/samples/content/index.html#getting-partial-content", 
            "text": "CMIS 1.0  CMIS 1.1  It s also possible to get only a part of the content.  OpenCMIS (Java)  Document document = ...\n\n// skip the first 100 bytes\n// use null to start from the beginning\nBigInteger offset = BigInteger.valueOf(100);\n\n// only read 200 bytes\n// use null to read to the end of the stream\nBigInteger length = BigInteger.valueOf(200); \n\nContentStream contentStream = document.getContentStream(offset, length);\nInputStream stream = contentStream.getStream();  PortCMIS (C#)  IDocument document = ...\n\n// skip the first 100 bytes\n// use null to start from the beginning\nlong? offset = 100;\n\n// only read 200 bytes\n// use null to read to the end of the stream\nlong? length = 200;\n\nIContentStream contentStream = document.GetContentStream(offset, length);\nStream stream = contentStream.Stream;", 
            "title": "Getting Partial Content"
        }, 
        {
            "location": "/samples/content/index.html#getting-a-content-url", 
            "text": "The AtomPub Binding and the Browser Binding can provide a URL to the content of a document. Depending on the repository and the binding, the server might not return the content but an error message because this URL does not include authentication data. A user may have to re-authenticate to get the content.  OpenCMIS (Java)  Document document = ...\n\nString link = document.getContentUrl();", 
            "title": "Getting a Content URL"
        }, 
        {
            "location": "/samples/content/index.html#updating-content", 
            "text": "", 
            "title": "Updating Content"
        }, 
        {
            "location": "/samples/content/index.html#overwriting-content", 
            "text": "CMIS 1.0  CMIS 1.1  OpenCMIS (Java)  Document document = ...\n\nContentStream contentStream = ...\n\ndocument.setContentStream(contentStream, true);  PortCMIS (C#)  IDocument document = ...\n\nIContentStream contentStream = ...\n\ndocument.SetContentStream(contentStream, true);", 
            "title": "Overwriting Content"
        }, 
        {
            "location": "/samples/content/index.html#deleting-content", 
            "text": "CMIS 1.0  CMIS 1.1   Warning  Some repositories  don t support documents without content. Check the  repository capabilities  if that s the case or check the Allowable Actions  of the document.   OpenCMIS (Java)  Document document = ...\ndocument.deleteContentStream();  PortCMIS (C#)  IDocument document = ...\ndocument.DeleteContentStream();", 
            "title": "Deleting Content"
        }, 
        {
            "location": "/samples/content/index.html#appending-content", 
            "text": "CMIS 1.1   Warning  Not all repositories support appending content. It is not possible to discover wheter a repository supports it or not.\nIf you append content be prepared to catch a  notSupported  exception.    OpenCMIS (Java)  Document document = ...\n\nContentStream contentStream = ...\nboolean isLastChunk = true; // indicates that this is the last part of the content \n\ndocument.appendContentStream(contentStream, isLastChunk);  PortCMIS (C#)  IDocument document = ...\n\nIContentStream contentStream = ...\nbool isLastChunk = true; // indicates that this is the last part of the content \n\ndocument.AppendContentStream(contentStream, isLastChunk);", 
            "title": "Appending Content"
        }, 
        {
            "location": "/samples/content/index.html#working-with-renditions", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.4.2  Renditions are alternative versions of a document. For example, a rendition could be a PDF of an Office document. Thumbnails are a special kind of renditions and could also exist for non-document objects. \nCMIS only supports server managed renditions. A CMIS client cannot upload, modify, or delete a rendition.", 
            "title": "Working with Renditions"
        }, 
        {
            "location": "/samples/content/index.html#getting-the-list-of-renditions", 
            "text": "Note  The list of renditions is only available if it has been requested with an  Operation Context .   OpenCMIS (Java)  Document document = ...\n\nfor (Rendition rendition: document.getRenditions()) {\n    System.out.println(rendition.getTitle() +  :   + rendition.getStreamId());\n}  PortCMIS (C#)  IDocument document = ...\n\nforeach (IRendition rendition in folder.Renditions) {\n    Console.WriteLine(rendition.Title +  :   + rendition.StreamId);\n}", 
            "title": "Getting the List of Renditions"
        }, 
        {
            "location": "/samples/content/index.html#getting-rendition-content", 
            "text": "The rendition content can be retrieved either for an Rendition object (see above) or directly from the document with a stream ID.  OpenCMIS (Java)  Document document = ...\nRendition rendition = ...\n\nContentStream cs1 = document.getContentStream(rendition.getStreamId());\n\nContentStream cs2 = rendition.getContentStream();  PortCMIS (C#)  IDocument document = ...\nIRendition rendition = ...\n\nIContentStream cs1 = document.GetContentStream(rendition.StreamId);\n\nIContentStream cs2 = rendition.GetContentStream();", 
            "title": "Getting Rendition Content"
        }, 
        {
            "location": "/samples/versions/index.html", 
            "text": "Working with Versions\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.13\n\n\nOnly documents can be versioned and only if the type of the document is marked as versionable.\n\n\nTo check whether a document type is verionable or not, use the following code.\n\n\nOpenCMIS (Java)\n\n\nDocumentType documentType = (DocumentType) session.getTypeDefinition(\nmy:documentType\n);\nboolean isVersionable = Boolean.TRUE.equals(documentType.isVersionable());\n\n\n\n\nPortCMIS (C#)\n\n\nIDocumentType documentType = session.GetTypeDefinition(\nmy:documentType\n) as IDocumentType;\nbool isVersionable = documentType.Versionable == true;\n\n\n\n\nRetrieving the Version History\n\n\nThe code snippets below show how to retrieve the version history of a document.\nThe returned list is ordered by creation date (\ncmis:creationDate\n). The newest version is on the top of the list, the first version on the bottom.\nIf the version series is checked-out, a \nPWC\n exists and the user is allowed to see the \nPWC\n, then this \nPWC\n is the first entry in the list.\n\n\nUse an \nOperation Context\n to define which details of the version objects should be returned. \ngetAllVersions\n does not support paging. Only the complete version history can be requested.\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\nfor (Document version: document.getAllVersions())\n{\n    System.out.println(child.getVersionLabel());\n}\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\n\nforeach (IDocument version in document.GetAllVersions())\n{\n    Console.WriteLine(child.VersionLabel);\n}\n\n\n\n\nGetting the Latest Version\n\n\nThe version that has the most recent last modification date (\ncmis:lastModificationDate\n) is called the latest version of the version series.\n\n\nIf you already have a version document object from a version series, you can test if it is the latest version and if not, get the latest version.\n\n\n\n\nNote\n\n\nThe test if the document is the latest verion depends on the property \ncmis:isLatestVersion\n.\nThe property has to loaded with document object to make this check work. See the page about the \nOperation Context\n to learn how to accomplish that.\n\n\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\nDocument latest;\n\nif (Boolean.TRUE.equals(document.isLatestVersion())) {\n    latest = document;\n} else {\n    latest = document.getObjectOfLatestVersion(false); // major = false\n}\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\nIDocument latest;\n\nif (document.LatestVersion == true) {\n    latest = document;\n} else {\n    latest = document.GetObjectOfLatestVersion(false); // major = false\n}\n\n\n\n\nIf you only have a document ID, you can use the following code to get latest version.\n\n\nOpenCMIS (Java)\n\n\nDocument latest = session.getLatestDocumentVersion(docId);\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument latest = Session.GetLatestDocumentVersion(docId);\n\n\n\n\nCreating Versions\n\n\nTo create a new version, the version series has to be checked out, updated and checked in.\nMany repositories allow a check out only on the latest version.\n\n\nThe check-out creates a \nPWC\n (Private Working Copy). The \nPWC\n can (usually) only be seen and updated by the user who checked out the version series. There can be only one \nPWC\n per version series, which means that version series is locked while it is checked out.\n\n\nTo check if a version series is already checked out, use this snippet.\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\nboolean isCheckedOut = Boolean.TRUE.equals(document.isVersionSeriesCheckedOut());\nString checkedOutBy = document.getVersionSeriesCheckedOutBy(); // not all repositories provide this\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\n\nbool isCheckedOut = document.IsVersionSeriesCheckedOut == true;\nstring checkedOutBy = document.VersionSeriesCheckedOutBy; // not all repositories provide this\n\n\n\n\nCheck-out\n\n\nOpenCMIS (Java)\n\n\nDocument document = ...\n\nObjectId pwcId = document.checkOut();\nDocument pwc = session.getObject(pwcId); // get PWC document\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument document = ...\n\nIObjectId pwcId = document.CheckOut();\nIDocument pwc = session.GetObject(pwcId); // get PWC document\n\n\n\n\nCancel Check-out\n\n\nOpenCMIS (Java)\n\n\nDocument pwc = ...\n\npwc.cancelCheckOut();\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument pwc = ...\n\npwc.CancelCheckOut();\n\n\n\n\nCheck-in\n\n\nOpenCMIS (Java)\n\n\nDocument pwc = ...\n\nObjectId newVersionId = pwc.checkIn(true, null, null, \nnew version\n);\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument pwc = ...\n\nIObjectId newVersionId = pwc.CheckIn(true, null, null, \nnew version\n);", 
            "title": "Working with Versions"
        }, 
        {
            "location": "/samples/versions/index.html#working-with-versions", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.13  Only documents can be versioned and only if the type of the document is marked as versionable.  To check whether a document type is verionable or not, use the following code.  OpenCMIS (Java)  DocumentType documentType = (DocumentType) session.getTypeDefinition( my:documentType );\nboolean isVersionable = Boolean.TRUE.equals(documentType.isVersionable());  PortCMIS (C#)  IDocumentType documentType = session.GetTypeDefinition( my:documentType ) as IDocumentType;\nbool isVersionable = documentType.Versionable == true;", 
            "title": "Working with Versions"
        }, 
        {
            "location": "/samples/versions/index.html#retrieving-the-version-history", 
            "text": "The code snippets below show how to retrieve the version history of a document.\nThe returned list is ordered by creation date ( cmis:creationDate ). The newest version is on the top of the list, the first version on the bottom.\nIf the version series is checked-out, a  PWC  exists and the user is allowed to see the  PWC , then this  PWC  is the first entry in the list.  Use an  Operation Context  to define which details of the version objects should be returned.  getAllVersions  does not support paging. Only the complete version history can be requested.  OpenCMIS (Java)  Document document = ...\n\nfor (Document version: document.getAllVersions())\n{\n    System.out.println(child.getVersionLabel());\n}  PortCMIS (C#)  IDocument document = ...\n\nforeach (IDocument version in document.GetAllVersions())\n{\n    Console.WriteLine(child.VersionLabel);\n}", 
            "title": "Retrieving the Version History"
        }, 
        {
            "location": "/samples/versions/index.html#getting-the-latest-version", 
            "text": "The version that has the most recent last modification date ( cmis:lastModificationDate ) is called the latest version of the version series.  If you already have a version document object from a version series, you can test if it is the latest version and if not, get the latest version.   Note  The test if the document is the latest verion depends on the property  cmis:isLatestVersion .\nThe property has to loaded with document object to make this check work. See the page about the  Operation Context  to learn how to accomplish that.   OpenCMIS (Java)  Document document = ...\nDocument latest;\n\nif (Boolean.TRUE.equals(document.isLatestVersion())) {\n    latest = document;\n} else {\n    latest = document.getObjectOfLatestVersion(false); // major = false\n}  PortCMIS (C#)  IDocument document = ...\nIDocument latest;\n\nif (document.LatestVersion == true) {\n    latest = document;\n} else {\n    latest = document.GetObjectOfLatestVersion(false); // major = false\n}  If you only have a document ID, you can use the following code to get latest version.  OpenCMIS (Java)  Document latest = session.getLatestDocumentVersion(docId);  PortCMIS (C#)  IDocument latest = Session.GetLatestDocumentVersion(docId);", 
            "title": "Getting the Latest Version"
        }, 
        {
            "location": "/samples/versions/index.html#creating-versions", 
            "text": "To create a new version, the version series has to be checked out, updated and checked in.\nMany repositories allow a check out only on the latest version.  The check-out creates a  PWC  (Private Working Copy). The  PWC  can (usually) only be seen and updated by the user who checked out the version series. There can be only one  PWC  per version series, which means that version series is locked while it is checked out.  To check if a version series is already checked out, use this snippet.  OpenCMIS (Java)  Document document = ...\n\nboolean isCheckedOut = Boolean.TRUE.equals(document.isVersionSeriesCheckedOut());\nString checkedOutBy = document.getVersionSeriesCheckedOutBy(); // not all repositories provide this  PortCMIS (C#)  IDocument document = ...\n\nbool isCheckedOut = document.IsVersionSeriesCheckedOut == true;\nstring checkedOutBy = document.VersionSeriesCheckedOutBy; // not all repositories provide this", 
            "title": "Creating Versions"
        }, 
        {
            "location": "/samples/versions/index.html#check-out", 
            "text": "OpenCMIS (Java)  Document document = ...\n\nObjectId pwcId = document.checkOut();\nDocument pwc = session.getObject(pwcId); // get PWC document  PortCMIS (C#)  IDocument document = ...\n\nIObjectId pwcId = document.CheckOut();\nIDocument pwc = session.GetObject(pwcId); // get PWC document", 
            "title": "Check-out"
        }, 
        {
            "location": "/samples/versions/index.html#cancel-check-out", 
            "text": "OpenCMIS (Java)  Document pwc = ...\n\npwc.cancelCheckOut();  PortCMIS (C#)  IDocument pwc = ...\n\npwc.CancelCheckOut();", 
            "title": "Cancel Check-out"
        }, 
        {
            "location": "/samples/versions/index.html#check-in", 
            "text": "OpenCMIS (Java)  Document pwc = ...\n\nObjectId newVersionId = pwc.checkIn(true, null, null,  new version );  PortCMIS (C#)  IDocument pwc = ...\n\nIObjectId newVersionId = pwc.CheckIn(true, null, null,  new version );", 
            "title": "Check-in"
        }, 
        {
            "location": "/samples/properties/index.html", 
            "text": "Working with Properties and Secondary Types\n\n\nData Types\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nThe table below shows how the CMIS data types are mapped to Java and C# data types.\nMulti-value property values are set and returned as lists of these data types.\n\n\n\n\n\n\n\n\nCMIS Data Type\n\n\nOpenCMIS (Java)\n\n\nPortCMIS (C#)\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nString\n\n\nstring\n\n\n\n\n\n\nboolean\n\n\nBoolean\n\n\nbool\n\n\n\n\n\n\ndecimal\n\n\nBigDecimal\n, float, double, byte, short, int, long\n\n\ndecimal\n, float, double\n\n\n\n\n\n\ninteger\n\n\nBigInteger\n, byte, short, int, long\n\n\nBigInteger\n, sbyte, byte, short, ushort, int, uint, long\n\n\n\n\n\n\ndatetime\n\n\nGregorianCalendar\n, Date\n\n\nDateTime\n\n\n\n\n\n\nuri\n\n\nString\n\n\nstring\n\n\n\n\n\n\nid\n\n\nString\n\n\nstring\n\n\n\n\n\n\nhtml\n\n\nString\n\n\nstring\n\n\n\n\n\n\n\n\nProperties\n\n\nRetrieving Properties\n\n\n\n\nNote\n\n\nOnly the properties that have been requested are available. Use an \nOperation Context\n to define, which properties should be provided by the repository.\n\n\n\n\nThe value of a property that is not set, has not been provided by the repository, or of a property that does not exits is \nnull\n.\n\n\nOpenCMIS (Java)\n\n\nDocument doc = ...\n\n// properties defined in the CMIS specification have getters (here are just a few examples)\nString id = doc.getId();\nString name = doc.getName();\nString creator = doc.getCreatedBy();\nGregorianCalendar lastModification = doc.getLastModificationDate();\n\n\n// all property values can be accessed by their property ID\nString name2 = doc.getPropertyValue(\ncmis:name\n);\nBigInteger projectNumber = doc.getPropertyValue(\nproject:number\n);\n\n// multi value property values are always returned as lists\nList\nString\n colors = doc.getPropertyValue(\nproject:colors\n);\n\n// there is detailed information about a property available for generic clients\nProperty\nString\n nameProp = doc.getProperty(\ncmis:name\n);\nPropertyType namePropType = nameProp.getType();\nboolean nameMultiValued = nameProp.isMultiValued();\nString name3 = nameProp.getValue();\n\nProperty\nBoolean\n lightsProp = doc.getProperty(\nlights:on\n);\nPropertyType lightsPropType = lightsProp.getType();\nboolean lightsMultiValued = lightsProp.isMultiValued();\nBoolean lightsValue = lightsProp.getValue();\n\n\n\n\nPortCMIS (C#)\n\n\nIDocument doc = ...\n\n// properties defined in the CMIS specification have getters (here are just a few examples)\nstring id = doc.Id;\nstring name = doc.Name;\nstring creator = doc.CreatedBy;\nDateTime? lastModification = doc.LastModificationDate;\n\n// all property values can be accessed by their property ID\nstring name2 = doc.GetPropertyAsStringValue(\ncmis:name\n);\nBigInteger projectNumber = (BigInteger)doc.GetPropertyValue(\nproject:number\n);\n\n// multi value property values are always returned as lists\nIList\nstring\n colors = (IList\nstring\n)doc.GetPropertyValue(\nproject:colors\n);\n\n// there is detailed information about a property available for generic clients\nIProperty nameProp = doc[\ncmis:name\n];\nPropertyType? namePropType = nameProp.PropertyType;\nbool nameMultiValued = nameProp.IsMultiValued;\nstring name3 = (string)nameProp.Value;\n\nIProperty lightsProp = doc[\nlights:on\n];\nPropertyType? lightsPropType = lightsProp.PropertyType;\nbool lightsMultiValued = lightsProp.IsMultiValued;\nbool? lightsValue = (bool?)lightsProp.Value;\n\n\n\n\n\nSetting Properties\n\n\nBefore OpenCMIS or PortCMIS sends properties to a repository, it checks the type definition whether the properties exist or not, if the data types match, and if multi-value properties contain \nnull\n values. If it detects a problem, it throws an exception before it sends anything to the repository.\n\n\nIf a property cannot be set, for example because it is a read-only property, OpenCMIS or PortCMIS silently filters out the property. The value is not sent to the repository.\n\n\nOpenCMIS (Java)\n\n\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\n\n// adding single value properties\nproperties.put(PropertyIds.NAME, \nthe-tower\n);\nproperties.put(\nproject:number\n, 1234);\nproperties.put(\nproject:now\n, new GregorianCalendar());\nproperties.put(\nproject:onTime\n, true);\nproperties.put(\nproject:budget\n, new BigDecimal(\n654321.98\n));\n\n// adding a multi value property\nList\nString\n colors = new ArrayList\nString\n();\ncolors.add(\nred\n);\ncolors.add(\ngreen\n);\ncolors.add(\nblue\n);\n\nproperties.put(\nproject:colors\n, colors); \n\n// unsetting a property\nproperties.put(\nproject:something\n, null);\n\n// call create... or update...\n\n\n\n\nPortCMIS (C#)\n\n\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\n\n// adding single value properties\nproperties[PropertyIds.Name] = \nthe-tower\n;\nproperties[\nproject:number\n] = 1234;\nproperties[\nproject:now\n] = DateTime.Now;\nproperties[\nproject:onTime\n] = true;\nproperties[\nproject:budget\n] = 654321.98M;\n\n// adding a multi value property\nIList\nstring\n colors = new List\nstring\n();\ncolors.Add(\nred\n);\ncolors.Add(\ngreen\n);\ncolors.Add(\nblue\n);\n\nproperties[\nproject:colors\n] = colors; \n\n// unsetting a property\nproperties[\nproject:something\n] = null;\n\n// call Create... or Update...\n\n\n\n\nSecondary Types\n\n\nCMIS 1.1\n\n\nSpec 2.1.19\n\n\nSecondary types can be added during creation of an object and later added and removed by updating its properties.\n\n\nIn general, secondary types can be added and removed at any time.\nBut a repository may have rules and constraints that prevents a client from making those changes.\n\n\nSetting Secondary Types\n\n\nOpenCMIS (Java)\n\n\nFolder parent = ...\n\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\n\n// set standard CMIS properties\nproperties.put(PropertyIds.NAME, \nMyNewDocument\n);\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \ncmis:document\n);\n\n// add two secondary types\nList\nString\n secondaryTypes = new ArrayList\nString\n();\nsecondaryTypes.add(\ncustom:classifictaion\n);\nsecondaryTypes.add(\ncustom:draft\n);\n\nproperties.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS, secondaryTypes);\n\n// set secondary type properties\nproperties.put(\nclassifictaion\n, \nconfidential\n);\nproperties.put(\ndraftState\n, \nearly\n);\n\nContentStream contentStream = ...\n\n// create the document\nDocument newDoc = parent.createDocument(properties, contentStream, VersioningState.NONE);\n\n\n\n\nPortCMIS (C#)\n\n\nIFolder parent = ...\n\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\n\n// set standard CMIS properties\nproperties[PropertyIds.Name] = \nMyNewDocument\n;\nproperties[PropertyIds.ObjectTypeId] = \ncmis:document\n;\n\n// add two secondary types\nIList\nstring\n secondaryTypes = new List\nstring\n();\nsecondaryTypes.Add(\ncustom:classifictaion\n);\nsecondaryTypes.Add(\ncustom:draft\n);\n\nproperties[PropertyIds.SecondaryObjectTypeIds] = secondaryTypes;\n\n// set secondary type properties\nproperties[\nclassifictaion\n] = \nconfidential\n;\nproperties[\ndraftState\n] = \nearly\n;\n\nContentStream contentStream = ...\n\n// create the document\nIDocument newDoc = parent.CreateDocument(properties, contentStream, VersioningState.None);\n\n\n\n\nAdding Secondary Types\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = ...\n\n// get current list of secondary types\nList\nString\n secondaryTypes = doc.getPropertyValue(PropertyIds.SECONDARY_OBJECT_TYPE_IDS);\nif (secondaryTypes == null) {\n    secondaryTypes = new ArrayList\nString\n();\n}\n\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\n\n// add the new secondary type\nsecondaryTypes.add(\ncustom:classifictaion\n);\nproperties.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS, secondaryTypes);\n\n// set secondary type property\nproperties.put(\nclassifictaion\n, \npublic\n);\n\n// update\ncmisObject.updateProperties(properties);\n\n\n\n\nOpenCMIS (Java)\n\n\n// the convenient way...\n\nCmisObject cmisObject = ...\n\n// set secondary type property\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\nproperties.put(\nclassifictaion\n, \npublic\n);\n\n// update with secondary type\ncmisObject.updateProperties(properties, Collections.singletonList(\ncustom:classifictaion\n), null);\n\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = ...\n\n// get current list of secondary types\nIList\nstring\n secondaryTypes = (IList\nstring\n)doc.GetPropertyValue(PropertyIds.SecondaryObjectTypeIds);\nif (secondaryTypes == null) {\n    secondaryTypes = new List\nstring\n();\n}\n\nIDictonary\nstring, object\n properties = new Dictonary\nstring, object\n();\n\n// add the new secondary type\nsecondaryTypes.Add(\ncustom:classifictaion\n);\nproperties[PropertyIds.SecondaryObjectTypeIds] = secondaryTypes;\n\n// set secondary type property\nproperties[\nclassifictaion\n] = \npublic\n;\n\n// update\ncmisObject.UpdateProperties(properties);\n\n\n\n\nRemoving Secondary Types\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = ...\n\n// get the current list of secondary types\nList\nString\n secondaryTypes = doc.getPropertyValue(PropertyIds.SECONDARY_OBJECT_TYPE_IDS);\nif (secondaryTypes == null || !secondaryTypes.contains(\ncustom:classifictaion\n)) {\n    // there is nothing to remove\n    return;\n}\n\nMap\nString, Object\n properties = new HashMap\nString, Object\n();\n\n// remove the new secondary type\nsecondaryTypes.remove(\ncustom:classifictaion\n);\nproperties.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS, secondaryTypes);\n\n// update\ncmisObject.updateProperties(properties);\n\n\n\n\nOpenCMIS (Java)\n\n\n// the convenient way...\n\nCmisObject cmisObject = ...\n\n// remove secondary type\ncmisObject.updateProperties(null, null, Collections.singletonList(\ncustom:classifictaion\n));\n\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = ...\n\n// get current list of secondary types\nIList\nstring\n secondaryTypes = (IList\nstring\n)doc.GetPropertyValue(PropertyIds.SecondaryObjectTypeIds);\nif (secondaryTypes == null || !secondaryTypes.Contains(\ncustom:classifictaion\n)) {\n    // there is nothing to remove\n    return;\n}\n\nIDictionary\nstring, object\n properties = new Dictionary\nstring, object\n();\n\n// remove the secondary type\nsecondaryTypes.Remove(\ncustom:classifictaion\n);\nproperties[PropertyIds.SecondaryObjectTypeIds] = secondaryTypes;\n\n// update\ncmisObject.UpdateProperties(properties);", 
            "title": "Working with Properties and Secondary Types"
        }, 
        {
            "location": "/samples/properties/index.html#working-with-properties-and-secondary-types", 
            "text": "", 
            "title": "Working with Properties and Secondary Types"
        }, 
        {
            "location": "/samples/properties/index.html#data-types", 
            "text": "CMIS 1.0  CMIS 1.1  The table below shows how the CMIS data types are mapped to Java and C# data types.\nMulti-value property values are set and returned as lists of these data types.     CMIS Data Type  OpenCMIS (Java)  PortCMIS (C#)      string  String  string    boolean  Boolean  bool    decimal  BigDecimal , float, double, byte, short, int, long  decimal , float, double    integer  BigInteger , byte, short, int, long  BigInteger , sbyte, byte, short, ushort, int, uint, long    datetime  GregorianCalendar , Date  DateTime    uri  String  string    id  String  string    html  String  string", 
            "title": "Data Types"
        }, 
        {
            "location": "/samples/properties/index.html#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/samples/properties/index.html#retrieving-properties", 
            "text": "Note  Only the properties that have been requested are available. Use an  Operation Context  to define, which properties should be provided by the repository.   The value of a property that is not set, has not been provided by the repository, or of a property that does not exits is  null .  OpenCMIS (Java)  Document doc = ...\n\n// properties defined in the CMIS specification have getters (here are just a few examples)\nString id = doc.getId();\nString name = doc.getName();\nString creator = doc.getCreatedBy();\nGregorianCalendar lastModification = doc.getLastModificationDate();\n\n\n// all property values can be accessed by their property ID\nString name2 = doc.getPropertyValue( cmis:name );\nBigInteger projectNumber = doc.getPropertyValue( project:number );\n\n// multi value property values are always returned as lists\nList String  colors = doc.getPropertyValue( project:colors );\n\n// there is detailed information about a property available for generic clients\nProperty String  nameProp = doc.getProperty( cmis:name );\nPropertyType namePropType = nameProp.getType();\nboolean nameMultiValued = nameProp.isMultiValued();\nString name3 = nameProp.getValue();\n\nProperty Boolean  lightsProp = doc.getProperty( lights:on );\nPropertyType lightsPropType = lightsProp.getType();\nboolean lightsMultiValued = lightsProp.isMultiValued();\nBoolean lightsValue = lightsProp.getValue();  PortCMIS (C#)  IDocument doc = ...\n\n// properties defined in the CMIS specification have getters (here are just a few examples)\nstring id = doc.Id;\nstring name = doc.Name;\nstring creator = doc.CreatedBy;\nDateTime? lastModification = doc.LastModificationDate;\n\n// all property values can be accessed by their property ID\nstring name2 = doc.GetPropertyAsStringValue( cmis:name );\nBigInteger projectNumber = (BigInteger)doc.GetPropertyValue( project:number );\n\n// multi value property values are always returned as lists\nIList string  colors = (IList string )doc.GetPropertyValue( project:colors );\n\n// there is detailed information about a property available for generic clients\nIProperty nameProp = doc[ cmis:name ];\nPropertyType? namePropType = nameProp.PropertyType;\nbool nameMultiValued = nameProp.IsMultiValued;\nstring name3 = (string)nameProp.Value;\n\nIProperty lightsProp = doc[ lights:on ];\nPropertyType? lightsPropType = lightsProp.PropertyType;\nbool lightsMultiValued = lightsProp.IsMultiValued;\nbool? lightsValue = (bool?)lightsProp.Value;", 
            "title": "Retrieving Properties"
        }, 
        {
            "location": "/samples/properties/index.html#setting-properties", 
            "text": "Before OpenCMIS or PortCMIS sends properties to a repository, it checks the type definition whether the properties exist or not, if the data types match, and if multi-value properties contain  null  values. If it detects a problem, it throws an exception before it sends anything to the repository.  If a property cannot be set, for example because it is a read-only property, OpenCMIS or PortCMIS silently filters out the property. The value is not sent to the repository.  OpenCMIS (Java)  Map String, Object  properties = new HashMap String, Object ();\n\n// adding single value properties\nproperties.put(PropertyIds.NAME,  the-tower );\nproperties.put( project:number , 1234);\nproperties.put( project:now , new GregorianCalendar());\nproperties.put( project:onTime , true);\nproperties.put( project:budget , new BigDecimal( 654321.98 ));\n\n// adding a multi value property\nList String  colors = new ArrayList String ();\ncolors.add( red );\ncolors.add( green );\ncolors.add( blue );\n\nproperties.put( project:colors , colors); \n\n// unsetting a property\nproperties.put( project:something , null);\n\n// call create... or update...  PortCMIS (C#)  IDictionary string, object  properties = new Dictionary string, object ();\n\n// adding single value properties\nproperties[PropertyIds.Name] =  the-tower ;\nproperties[ project:number ] = 1234;\nproperties[ project:now ] = DateTime.Now;\nproperties[ project:onTime ] = true;\nproperties[ project:budget ] = 654321.98M;\n\n// adding a multi value property\nIList string  colors = new List string ();\ncolors.Add( red );\ncolors.Add( green );\ncolors.Add( blue );\n\nproperties[ project:colors ] = colors; \n\n// unsetting a property\nproperties[ project:something ] = null;\n\n// call Create... or Update...", 
            "title": "Setting Properties"
        }, 
        {
            "location": "/samples/properties/index.html#secondary-types", 
            "text": "CMIS 1.1  Spec 2.1.19  Secondary types can be added during creation of an object and later added and removed by updating its properties.  In general, secondary types can be added and removed at any time.\nBut a repository may have rules and constraints that prevents a client from making those changes.", 
            "title": "Secondary Types"
        }, 
        {
            "location": "/samples/properties/index.html#setting-secondary-types", 
            "text": "OpenCMIS (Java)  Folder parent = ...\n\nMap String, Object  properties = new HashMap String, Object ();\n\n// set standard CMIS properties\nproperties.put(PropertyIds.NAME,  MyNewDocument );\nproperties.put(PropertyIds.OBJECT_TYPE_ID,  cmis:document );\n\n// add two secondary types\nList String  secondaryTypes = new ArrayList String ();\nsecondaryTypes.add( custom:classifictaion );\nsecondaryTypes.add( custom:draft );\n\nproperties.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS, secondaryTypes);\n\n// set secondary type properties\nproperties.put( classifictaion ,  confidential );\nproperties.put( draftState ,  early );\n\nContentStream contentStream = ...\n\n// create the document\nDocument newDoc = parent.createDocument(properties, contentStream, VersioningState.NONE);  PortCMIS (C#)  IFolder parent = ...\n\nIDictionary string, object  properties = new Dictionary string, object ();\n\n// set standard CMIS properties\nproperties[PropertyIds.Name] =  MyNewDocument ;\nproperties[PropertyIds.ObjectTypeId] =  cmis:document ;\n\n// add two secondary types\nIList string  secondaryTypes = new List string ();\nsecondaryTypes.Add( custom:classifictaion );\nsecondaryTypes.Add( custom:draft );\n\nproperties[PropertyIds.SecondaryObjectTypeIds] = secondaryTypes;\n\n// set secondary type properties\nproperties[ classifictaion ] =  confidential ;\nproperties[ draftState ] =  early ;\n\nContentStream contentStream = ...\n\n// create the document\nIDocument newDoc = parent.CreateDocument(properties, contentStream, VersioningState.None);", 
            "title": "Setting Secondary Types"
        }, 
        {
            "location": "/samples/properties/index.html#adding-secondary-types", 
            "text": "OpenCMIS (Java)  CmisObject cmisObject = ...\n\n// get current list of secondary types\nList String  secondaryTypes = doc.getPropertyValue(PropertyIds.SECONDARY_OBJECT_TYPE_IDS);\nif (secondaryTypes == null) {\n    secondaryTypes = new ArrayList String ();\n}\n\nMap String, Object  properties = new HashMap String, Object ();\n\n// add the new secondary type\nsecondaryTypes.add( custom:classifictaion );\nproperties.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS, secondaryTypes);\n\n// set secondary type property\nproperties.put( classifictaion ,  public );\n\n// update\ncmisObject.updateProperties(properties);  OpenCMIS (Java)  // the convenient way...\n\nCmisObject cmisObject = ...\n\n// set secondary type property\nMap String, Object  properties = new HashMap String, Object ();\nproperties.put( classifictaion ,  public );\n\n// update with secondary type\ncmisObject.updateProperties(properties, Collections.singletonList( custom:classifictaion ), null);  PortCMIS (C#)  ICmisObject cmisObject = ...\n\n// get current list of secondary types\nIList string  secondaryTypes = (IList string )doc.GetPropertyValue(PropertyIds.SecondaryObjectTypeIds);\nif (secondaryTypes == null) {\n    secondaryTypes = new List string ();\n}\n\nIDictonary string, object  properties = new Dictonary string, object ();\n\n// add the new secondary type\nsecondaryTypes.Add( custom:classifictaion );\nproperties[PropertyIds.SecondaryObjectTypeIds] = secondaryTypes;\n\n// set secondary type property\nproperties[ classifictaion ] =  public ;\n\n// update\ncmisObject.UpdateProperties(properties);", 
            "title": "Adding Secondary Types"
        }, 
        {
            "location": "/samples/properties/index.html#removing-secondary-types", 
            "text": "OpenCMIS (Java)  CmisObject cmisObject = ...\n\n// get the current list of secondary types\nList String  secondaryTypes = doc.getPropertyValue(PropertyIds.SECONDARY_OBJECT_TYPE_IDS);\nif (secondaryTypes == null || !secondaryTypes.contains( custom:classifictaion )) {\n    // there is nothing to remove\n    return;\n}\n\nMap String, Object  properties = new HashMap String, Object ();\n\n// remove the new secondary type\nsecondaryTypes.remove( custom:classifictaion );\nproperties.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS, secondaryTypes);\n\n// update\ncmisObject.updateProperties(properties);  OpenCMIS (Java)  // the convenient way...\n\nCmisObject cmisObject = ...\n\n// remove secondary type\ncmisObject.updateProperties(null, null, Collections.singletonList( custom:classifictaion ));  PortCMIS (C#)  ICmisObject cmisObject = ...\n\n// get current list of secondary types\nIList string  secondaryTypes = (IList string )doc.GetPropertyValue(PropertyIds.SecondaryObjectTypeIds);\nif (secondaryTypes == null || !secondaryTypes.Contains( custom:classifictaion )) {\n    // there is nothing to remove\n    return;\n}\n\nIDictionary string, object  properties = new Dictionary string, object ();\n\n// remove the secondary type\nsecondaryTypes.Remove( custom:classifictaion );\nproperties[PropertyIds.SecondaryObjectTypeIds] = secondaryTypes;\n\n// update\ncmisObject.UpdateProperties(properties);", 
            "title": "Removing Secondary Types"
        }, 
        {
            "location": "/samples/operation-context/index.html", 
            "text": "Understanding the Operation Context\n\n\nThe amount of metadata and associated information retrieved during an OpenCMIS or PortCMIS operation could be large, so certain methods return a sensible subset of the information by default, and provide additional methods that take an OperationContext. An OperationContext allows you to tune the amount of information returned by setting property filters, rendition filters, or by setting flags to include path segments, ACLs, Allowable Actions, Policies, and Relationships. The OperationContext is also used to control paging and caching in an operation.\n\n\nProperty Filter\n\n\nSpec 2.2.1.2.1\n\n\nThe property filter defines which properties the repository must return. Only select the properties you really need to keep the transferred data as small as possible. The repository may return more properties than specified.\n\n\n\n\nQuery Names\n\n\nThe property filter is a collection of query names, not property IDs. The query names and property IDs of all properties defined in the CMIS specifation are same and therefore interchangeable. That might not be the case for custom types. \n\n\n\n\n\n\nMinimal Property Filter\n\n\nOpenCMIS and PortCMIS need at least the properties \ncmis:objectId\n, \ncmis:baseTypeId\n, and \ncmis:objectTypeId\n to create objects.\nThe default operation context implementation adds these properties automatically if they are missing in the property filter.\n\n\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setFilterString(\ncmis:objectId,cmis:name,cmis:createdBy\n);\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.FilterString = \ncmis:objectId,cmis:name,cmis:createdBy\n;\n\n\n\n\nAllowable Actions\n\n\nSpec 2.2.1.2.6\n\n\nCalculating the Allowable Actions of an object can be very expensive for a repository. Don\nt request them if you don\nt need them.\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setIncludeAllowableActions(false); // don't request Allowable Actions\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.IncludeAllowableActions = false; // don't request Allowable Actions\n\n\n\n\nACLs\n\n\nSpec 2.2.1.2.5\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setIncludeAcls(true); // request ACLs\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.IncludeAcls = true; // request ACLs\n\n\n\n\nRelationships\n\n\nSpec 2.2.1.2.2\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setIncludeRelationships(IncludeRelationships.BOTH); // request source and target relationships\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.IncludeRelationships = IncludeRelationships.Both; // request source and target relationships\n\n\n\n\nPolicies\n\n\nSpec 2.2.1.2.3\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setIncludePolicies(true); // request policies\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.IncludePolicies = true; // request policies\n\n\n\n\nRendition Filter\n\n\nSpec 2.2.1.2.4\n\n\nThe rendition filter defines which rendition details should be returned by the repository. This filter is a comma separated list of rendition kinds (e.g. \ncmis:thumbnail\n) and MIME types. \n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setRenditionFilterString(\ncmis:thumbnail,image/*\n);\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.RenditionFilterString = \ncmis:thumbnail,image/*\n;\n\n\n\n\nRendition filer examples:\n\n\n\n\n*\n (include all renditions)\n\n\ncmis:thumbnail\n (include only thumbnails)\n\n\nimage/*\n (include all image renditions)\n\n\napplication/pdf,application/x-shockwave-flash\n (include web ready renditions)\n\n\ncmis:none\n (exclude all renditions)\n\n\n\n\nOrder By\n\n\nSpec 2.2.1.2.7\n\n\nThe list of objects returned by \ngetChildren\n, \ngetCheckedOutDocs\n, and \nqueryObjects\n can be ordered. This is a comma separated list of query names, followed by an optional ascending modifier \nASC\n or descending modifier \nDESC\n for each query name. If the modifier is not stated, \nASC\n is assumed.\n\n\n\n\nQuery Names\n\n\nSimilar to the property filter this is a collection of query names, not property IDs.\n\n\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setOrderBy(\ncmis:createdBy DESC,cmis:name ASC\n);\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.OrderBy(\ncmis:createdBy DESC,cmis:name ASC\n);\n\n\n\n\nList Batch Size\n\n\nLists returned by, for instances, \ngetChildren\n and \nquery\n are requested by OpenCMIS and PortCMIS in batches. The default batch size is 100. If a folder has 1,000 children, the client will make 10 \ngetChildren\n calls to the server while looping over the children.\n\n\n\n\nOptimal Batch Size\n\n\nThe optimal batch size depends on the use case. For applications that are using paging, the batch size should match the page size for the best performance. For applications that are processing all list items, the batch size should be as big as possible. The batch size maximum depends on the size of the list items (all items are loaded in main memory) and the server.\n\n\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setMaxItemsPerPage(10000); // 10,000 items per batch\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.MaxItemsPerPage = 10000; // 10,000 items per batch\n\n\n\n\nCaching\n\n\nAll objects retrieved by \ngetObject\n and \ngetObjectByPath\n are cached by default. If caching is turned off by an Operation Context, objects are not looked up in the cache and are not put into the cache. The methods getObject and getObjectByPath make a round-trip to the repository and get up-to-date data.\n\n\nSee also the section about the \nobject cache\n.\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\noc.setCacheEnabled(false); // no caching please\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\noc.CacheEnabled = false; // no caching please\n\n\n\n\nCreating Operation Context Objects\n\n\nOpenCMIS (Java)\n\n\n// create the default operation context\nOperationContext oc1 = session.createOperationContext();\n\n// create an operation context that selects nothing except the provided properties\nOperationContext oc2 = OperationContextUtils.createMinimumOperationContext(\ncmis:objectId\n, \ncmis:name\n, \ncmis:createdBy\n);\n\n// create an operation context that selects everything\nOperationContext oc3 = OperationContextUtils.createMaximumOperationContext();\n\n\n\n\nPortCMIS (C#)\n\n\n// create the default operation context\nIOperationContext oc1 = Session.CreateOperationContext();\n\n// create an operation context that selects nothing except the provided properties\nIOperationContext oc2 = OperationContextUtils.CreateMinimumOperationContext(\ncmis:objectId\n, \ncmis:name\n, \ncmis:createdBy\n);\n\n// create an operation context that selects everything\nIOperationContext oc3 = OperationContextUtils.CreateMaximumOperationContext();\n\n\n\n\nUsing an Operation Context\n\n\nMany methods that retrieve objects or data accept an Operation Context object as an additional parameter.\nIf no Operation Context object is provided, a default Operation Context object defines what should be requested.\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\n\nCmisObject cmisObject1 = session.getObject(id, oc);\nCmisObject cmisObject2 = session.getObjectByPath(path, oc);\nItemIterable\nCmisObject\n children = folder.getChildren(oc);\nList\nDocument\n versions = doc.getAllVersions(oc);\n\n\n\n\nPortCMIS (C#)\n\n\nIOperationContext oc = ...\n\nICmisObject cmisObject1 = session.GetObject(id, oc);\nICmisObject cmisObject2 = session.GetObjectByPath(path, oc);\nIItemEnumerable\nICmisObject\n children = folder.GetChildren(oc);\nIList\nIDocument\n versions = doc.GetAllVersions(oc);", 
            "title": "Understanding the Operation Context"
        }, 
        {
            "location": "/samples/operation-context/index.html#understanding-the-operation-context", 
            "text": "The amount of metadata and associated information retrieved during an OpenCMIS or PortCMIS operation could be large, so certain methods return a sensible subset of the information by default, and provide additional methods that take an OperationContext. An OperationContext allows you to tune the amount of information returned by setting property filters, rendition filters, or by setting flags to include path segments, ACLs, Allowable Actions, Policies, and Relationships. The OperationContext is also used to control paging and caching in an operation.", 
            "title": "Understanding the Operation Context"
        }, 
        {
            "location": "/samples/operation-context/index.html#property-filter", 
            "text": "Spec 2.2.1.2.1  The property filter defines which properties the repository must return. Only select the properties you really need to keep the transferred data as small as possible. The repository may return more properties than specified.   Query Names  The property filter is a collection of query names, not property IDs. The query names and property IDs of all properties defined in the CMIS specifation are same and therefore interchangeable. That might not be the case for custom types.     Minimal Property Filter  OpenCMIS and PortCMIS need at least the properties  cmis:objectId ,  cmis:baseTypeId , and  cmis:objectTypeId  to create objects.\nThe default operation context implementation adds these properties automatically if they are missing in the property filter.   OpenCMIS (Java)  OperationContext oc = ...\noc.setFilterString( cmis:objectId,cmis:name,cmis:createdBy );  PortCMIS (C#)  IOperationContext oc = ...\noc.FilterString =  cmis:objectId,cmis:name,cmis:createdBy ;", 
            "title": "Property Filter"
        }, 
        {
            "location": "/samples/operation-context/index.html#allowable-actions", 
            "text": "Spec 2.2.1.2.6  Calculating the Allowable Actions of an object can be very expensive for a repository. Don t request them if you don t need them.  OpenCMIS (Java)  OperationContext oc = ...\noc.setIncludeAllowableActions(false); // don't request Allowable Actions  PortCMIS (C#)  IOperationContext oc = ...\noc.IncludeAllowableActions = false; // don't request Allowable Actions", 
            "title": "Allowable Actions"
        }, 
        {
            "location": "/samples/operation-context/index.html#acls", 
            "text": "Spec 2.2.1.2.5  OpenCMIS (Java)  OperationContext oc = ...\noc.setIncludeAcls(true); // request ACLs  PortCMIS (C#)  IOperationContext oc = ...\noc.IncludeAcls = true; // request ACLs", 
            "title": "ACLs"
        }, 
        {
            "location": "/samples/operation-context/index.html#relationships", 
            "text": "Spec 2.2.1.2.2  OpenCMIS (Java)  OperationContext oc = ...\noc.setIncludeRelationships(IncludeRelationships.BOTH); // request source and target relationships  PortCMIS (C#)  IOperationContext oc = ...\noc.IncludeRelationships = IncludeRelationships.Both; // request source and target relationships", 
            "title": "Relationships"
        }, 
        {
            "location": "/samples/operation-context/index.html#policies", 
            "text": "Spec 2.2.1.2.3  OpenCMIS (Java)  OperationContext oc = ...\noc.setIncludePolicies(true); // request policies  PortCMIS (C#)  IOperationContext oc = ...\noc.IncludePolicies = true; // request policies", 
            "title": "Policies"
        }, 
        {
            "location": "/samples/operation-context/index.html#rendition-filter", 
            "text": "Spec 2.2.1.2.4  The rendition filter defines which rendition details should be returned by the repository. This filter is a comma separated list of rendition kinds (e.g.  cmis:thumbnail ) and MIME types.   OpenCMIS (Java)  OperationContext oc = ...\noc.setRenditionFilterString( cmis:thumbnail,image/* );  PortCMIS (C#)  IOperationContext oc = ...\noc.RenditionFilterString =  cmis:thumbnail,image/* ;  Rendition filer examples:   *  (include all renditions)  cmis:thumbnail  (include only thumbnails)  image/*  (include all image renditions)  application/pdf,application/x-shockwave-flash  (include web ready renditions)  cmis:none  (exclude all renditions)", 
            "title": "Rendition Filter"
        }, 
        {
            "location": "/samples/operation-context/index.html#order-by", 
            "text": "Spec 2.2.1.2.7  The list of objects returned by  getChildren ,  getCheckedOutDocs , and  queryObjects  can be ordered. This is a comma separated list of query names, followed by an optional ascending modifier  ASC  or descending modifier  DESC  for each query name. If the modifier is not stated,  ASC  is assumed.   Query Names  Similar to the property filter this is a collection of query names, not property IDs.   OpenCMIS (Java)  OperationContext oc = ...\noc.setOrderBy( cmis:createdBy DESC,cmis:name ASC );  PortCMIS (C#)  IOperationContext oc = ...\noc.OrderBy( cmis:createdBy DESC,cmis:name ASC );", 
            "title": "Order By"
        }, 
        {
            "location": "/samples/operation-context/index.html#list-batch-size", 
            "text": "Lists returned by, for instances,  getChildren  and  query  are requested by OpenCMIS and PortCMIS in batches. The default batch size is 100. If a folder has 1,000 children, the client will make 10  getChildren  calls to the server while looping over the children.   Optimal Batch Size  The optimal batch size depends on the use case. For applications that are using paging, the batch size should match the page size for the best performance. For applications that are processing all list items, the batch size should be as big as possible. The batch size maximum depends on the size of the list items (all items are loaded in main memory) and the server.   OpenCMIS (Java)  OperationContext oc = ...\noc.setMaxItemsPerPage(10000); // 10,000 items per batch  PortCMIS (C#)  IOperationContext oc = ...\noc.MaxItemsPerPage = 10000; // 10,000 items per batch", 
            "title": "List Batch Size"
        }, 
        {
            "location": "/samples/operation-context/index.html#caching", 
            "text": "All objects retrieved by  getObject  and  getObjectByPath  are cached by default. If caching is turned off by an Operation Context, objects are not looked up in the cache and are not put into the cache. The methods getObject and getObjectByPath make a round-trip to the repository and get up-to-date data.  See also the section about the  object cache .  OpenCMIS (Java)  OperationContext oc = ...\noc.setCacheEnabled(false); // no caching please  PortCMIS (C#)  IOperationContext oc = ...\noc.CacheEnabled = false; // no caching please", 
            "title": "Caching"
        }, 
        {
            "location": "/samples/operation-context/index.html#creating-operation-context-objects", 
            "text": "OpenCMIS (Java)  // create the default operation context\nOperationContext oc1 = session.createOperationContext();\n\n// create an operation context that selects nothing except the provided properties\nOperationContext oc2 = OperationContextUtils.createMinimumOperationContext( cmis:objectId ,  cmis:name ,  cmis:createdBy );\n\n// create an operation context that selects everything\nOperationContext oc3 = OperationContextUtils.createMaximumOperationContext();  PortCMIS (C#)  // create the default operation context\nIOperationContext oc1 = Session.CreateOperationContext();\n\n// create an operation context that selects nothing except the provided properties\nIOperationContext oc2 = OperationContextUtils.CreateMinimumOperationContext( cmis:objectId ,  cmis:name ,  cmis:createdBy );\n\n// create an operation context that selects everything\nIOperationContext oc3 = OperationContextUtils.CreateMaximumOperationContext();", 
            "title": "Creating Operation Context Objects"
        }, 
        {
            "location": "/samples/operation-context/index.html#using-an-operation-context", 
            "text": "Many methods that retrieve objects or data accept an Operation Context object as an additional parameter.\nIf no Operation Context object is provided, a default Operation Context object defines what should be requested.  OpenCMIS (Java)  OperationContext oc = ...\n\nCmisObject cmisObject1 = session.getObject(id, oc);\nCmisObject cmisObject2 = session.getObjectByPath(path, oc);\nItemIterable CmisObject  children = folder.getChildren(oc);\nList Document  versions = doc.getAllVersions(oc);  PortCMIS (C#)  IOperationContext oc = ...\n\nICmisObject cmisObject1 = session.GetObject(id, oc);\nICmisObject cmisObject2 = session.GetObjectByPath(path, oc);\nIItemEnumerable ICmisObject  children = folder.GetChildren(oc);\nIList IDocument  versions = doc.GetAllVersions(oc);", 
            "title": "Using an Operation Context"
        }, 
        {
            "location": "/samples/lists/index.html", 
            "text": "Working with Lists, Paging and Skipping\n\n\nIterating over a List\n\n\nThe following code snippets iterate over the complete list. Please note, that OpenCMIS and PortCMIS may make multiple calls to the repository.\n\n\nOpenCMIS (Java)\n\n\nItemIterable\nSomething\n somethingList = ...\n\nfor (Something something : somethingList) {\n    ...\n}\n\n\n\n\nPortCMIS (C#)\n\n\nIItemEnumerable\nSomething\n somethingList = ...\n\nforeach (Something something in somethingList) {\n    ...\n}\n\n\n\n\nPaging and Skipping\n\n\nClients can request only an excerpt of a list by defining an offset and/or a page size.\n\n\n\n\nNote\n\n\nFor the best performance adjust the list batch size with an \nOperation Context\n.\n\n\n\n\nOpenCMIS (Java)\n\n\nItemIterable\nSomething\n somethingList = ...\n\n// get a page of 5 items\nItemIterable\nSomething\n firstFive = somethingList.getPage(5);\n\n// get a list starting with the 10th item\nItemIterable\nSomething\n skipTen = somethingList.skipTo(10);\n\n// get a page of 20 items starting at the 100th item of the orignal list\nItemIterable\nSomething\n skipAndPage = somethingList.skipTo(100).getPage(20);\n\n\n\n\nPortCMIS (C#)\n\n\nIItemEnumerable\nSomething\n somethingList = ...\n\n// get a page of 5 items\nIItemEnumerable\nSomething\n firstFive = somethingList.GetPage(5);\n\n// get a list starting with the 10th item\nIItemEnumerable\nSomething\n skipTen = somethingList.SkipTo(10);\n\n// get a page of 20 items starting at the 100th item of the orignal list\nIItemEnumerable\nSomething\n skipAndPage = somethingList.SkipTo(100).GetPage(20);", 
            "title": "Working with Lists, Paging and Skipping"
        }, 
        {
            "location": "/samples/lists/index.html#working-with-lists-paging-and-skipping", 
            "text": "", 
            "title": "Working with Lists, Paging and Skipping"
        }, 
        {
            "location": "/samples/lists/index.html#iterating-over-a-list", 
            "text": "The following code snippets iterate over the complete list. Please note, that OpenCMIS and PortCMIS may make multiple calls to the repository.  OpenCMIS (Java)  ItemIterable Something  somethingList = ...\n\nfor (Something something : somethingList) {\n    ...\n}  PortCMIS (C#)  IItemEnumerable Something  somethingList = ...\n\nforeach (Something something in somethingList) {\n    ...\n}", 
            "title": "Iterating over a List"
        }, 
        {
            "location": "/samples/lists/index.html#paging-and-skipping", 
            "text": "Clients can request only an excerpt of a list by defining an offset and/or a page size.   Note  For the best performance adjust the list batch size with an  Operation Context .   OpenCMIS (Java)  ItemIterable Something  somethingList = ...\n\n// get a page of 5 items\nItemIterable Something  firstFive = somethingList.getPage(5);\n\n// get a list starting with the 10th item\nItemIterable Something  skipTen = somethingList.skipTo(10);\n\n// get a page of 20 items starting at the 100th item of the orignal list\nItemIterable Something  skipAndPage = somethingList.skipTo(100).getPage(20);  PortCMIS (C#)  IItemEnumerable Something  somethingList = ...\n\n// get a page of 5 items\nIItemEnumerable Something  firstFive = somethingList.GetPage(5);\n\n// get a list starting with the 10th item\nIItemEnumerable Something  skipTen = somethingList.SkipTo(10);\n\n// get a page of 20 items starting at the 100th item of the orignal list\nIItemEnumerable Something  skipAndPage = somethingList.SkipTo(100).GetPage(20);", 
            "title": "Paging and Skipping"
        }, 
        {
            "location": "/samples/extensions/index.html", 
            "text": "Getting Extensions\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = ...\nString extensionValue = null;\n\n// extensions can be attached to different levels\n// in this example we get the extensions on the properties level\nList\nCmisExtensionElement\n extensions = cmisObject.getExtensions(ExtensionLevel.PROPERTIES);\n\nif (extensions != null) {\n    // iterate through the extensions until we find the one we are looking for\n    for (CmisExtensionElement ext: extensions) {\n        if (\nmyExtension\n.equals(ext.getName())) {\n            extensionValue = ext.getValue();\n            break;\n        }\n    }\n}\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = ...\nstring extensionValue = null;\n\n// extensions can be attached to different levels\n// in this example we get the extensions on the properties level\nIList\nICmisExtensionElement\n extensions = cmisObject.GetExtensions(ExtensionLevel.Properties);\n\nif (extensions != null) {\n    // iterate through the extensions until we find the one we are looking for\n    try {\n        extensionValue = extensions.First(ext =\n ext.Name == \nmyExtension\n).Value;\n    } catch (InvalidOperationException) {\n        // not found\n    }\n}", 
            "title": "Getting Extensions"
        }, 
        {
            "location": "/samples/extensions/index.html#getting-extensions", 
            "text": "CMIS 1.0  CMIS 1.1  OpenCMIS (Java)  CmisObject cmisObject = ...\nString extensionValue = null;\n\n// extensions can be attached to different levels\n// in this example we get the extensions on the properties level\nList CmisExtensionElement  extensions = cmisObject.getExtensions(ExtensionLevel.PROPERTIES);\n\nif (extensions != null) {\n    // iterate through the extensions until we find the one we are looking for\n    for (CmisExtensionElement ext: extensions) {\n        if ( myExtension .equals(ext.getName())) {\n            extensionValue = ext.getValue();\n            break;\n        }\n    }\n}  PortCMIS (C#)  ICmisObject cmisObject = ...\nstring extensionValue = null;\n\n// extensions can be attached to different levels\n// in this example we get the extensions on the properties level\nIList ICmisExtensionElement  extensions = cmisObject.GetExtensions(ExtensionLevel.Properties);\n\nif (extensions != null) {\n    // iterate through the extensions until we find the one we are looking for\n    try {\n        extensionValue = extensions.First(ext =  ext.Name ==  myExtension ).Value;\n    } catch (InvalidOperationException) {\n        // not found\n    }\n}", 
            "title": "Getting Extensions"
        }, 
        {
            "location": "/samples/queries/index.html", 
            "text": "Executing Queries\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.14\n\n\nOpenCMIS (Java)\n\n\nItemIterable\nQueryResult\n results = session.query(\nSELECT * FROM cmis:document\n, false);\n\nfor(QueryResult hit: results) {  \n    for(PropertyData\n?\n property: hit.getProperties()) {\n\n        String queryName = property.getQueryName();\n        Object value = property.getFirstValue();\n\n        System.out.println(queryName + \n: \n + value);\n    }\n    System.out.println(\n--------------------------------------\n);\n}\n\n\n\n\nPortCMIS (C#)\n\n\nIItemEnumerable\nIQueryResult\n results = Session.Query(\nSELECT * FROM cmis:document\n, false);\n\nforeach (IQueryResult hit in results) {\n    foreach (PropertyData property in hit.Properties) {\n\n        string queryName = property.QueryName;\n        object value = property.FirstValue;\n\n        Console.WriteLine(queryName + \n: \n + value);\n    }\n    Console.WriteLine(\n--------------------------------------\n);\n}\n\n\n\n\nQuerying Objects\n\n\nOpenCMIS (Java)\n\n\nOperationContext oc = ...\n\n// find all folders starting with 'a' or 'A'\nItemIterable\nCmisObject\n results =\n    session.queryObjects(\ncmis:folder\n, \ncmis:name LIKE 'a%' OR cmis:name LIKE 'A%'\n, false, oc);\n\nfor (CmisObject cmisObject : results) {\n    Folder folder = (Folder) cmisObject; // it can only be a folder\n    System.out.println(folder.getName());\n}\n\n\n\n\nUsing a Query Statement\n\n\nQuery statements are very similar to \nprepared statements\n.\n\n\nOpenCMIS (Java)\n\n\nCalendar cal = ...\nFolder folder = ...\n\nQueryStatement qs = session.createQueryStatement(\nSELECT ?, ? FROM ? WHERE ? \n TIMESTAMP ? AND IN_FOLDER(?) OR ? IN (?)\n);\n\nqs.setProperty(1, \ncmis:document\n, \ncmis:name\n);\nqs.setProperty(2, \ncmis:document\n, \ncmis:objectId\n);\nqs.setType(3, \ncmis:document\n);\n\nqs.setProperty(4, \ncmis:document\n, \ncmis:creationDate\n);\nqs.setDateTime(5, cal);\n\nqs.setId(6, folder);\n\nqs.setProperty(7, \ncmis:document\n, \ncmis:createdBy\n);\nqs.setString(8, \nbob\n, \ntom\n, \nlisa\n); \n\n// get the compiled query statement\nString statement = qs.toQueryString();\n\n// ... or execute the query directly\nItemIterable\nQueryResult\n results = qs.query(false);\n\n\n\n\nQuery Performance\n\n\nMany aspects influence the query performance. Most of them are related to the server implementation and the server setup. Here are some generic hints how clients can influence the query performance.\n\n\n\n\nOnly select the properties you really need.  A query should never start with \nSELECT *\n . Some properties are more expensive than others. For instances, some repositories compile the \ncmis:path\n property on demand, which takes longer than returning a normal property such as \ncmis:name\n.\n\n\nDo not order if it isn\nt required. Sorting the result set in the application may be faster.\n\n\nUse an Operation context that disables \nrelationships\n (IncludeRelationships.NONE), \nrenditions\n (\ncmis:none\n), and  \nallowable actions\n.\n\n\nIf you are using paging, use an Operation Context with a \nbatch size that matches the page size\n.\n\n\nIf you have to process all query results, use an Operation Context with a \nbig batch size\n.", 
            "title": "Executing Queries"
        }, 
        {
            "location": "/samples/queries/index.html#executing-queries", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.14  OpenCMIS (Java)  ItemIterable QueryResult  results = session.query( SELECT * FROM cmis:document , false);\n\nfor(QueryResult hit: results) {  \n    for(PropertyData ?  property: hit.getProperties()) {\n\n        String queryName = property.getQueryName();\n        Object value = property.getFirstValue();\n\n        System.out.println(queryName +  :   + value);\n    }\n    System.out.println( -------------------------------------- );\n}  PortCMIS (C#)  IItemEnumerable IQueryResult  results = Session.Query( SELECT * FROM cmis:document , false);\n\nforeach (IQueryResult hit in results) {\n    foreach (PropertyData property in hit.Properties) {\n\n        string queryName = property.QueryName;\n        object value = property.FirstValue;\n\n        Console.WriteLine(queryName +  :   + value);\n    }\n    Console.WriteLine( -------------------------------------- );\n}", 
            "title": "Executing Queries"
        }, 
        {
            "location": "/samples/queries/index.html#querying-objects", 
            "text": "OpenCMIS (Java)  OperationContext oc = ...\n\n// find all folders starting with 'a' or 'A'\nItemIterable CmisObject  results =\n    session.queryObjects( cmis:folder ,  cmis:name LIKE 'a%' OR cmis:name LIKE 'A%' , false, oc);\n\nfor (CmisObject cmisObject : results) {\n    Folder folder = (Folder) cmisObject; // it can only be a folder\n    System.out.println(folder.getName());\n}", 
            "title": "Querying Objects"
        }, 
        {
            "location": "/samples/queries/index.html#using-a-query-statement", 
            "text": "Query statements are very similar to  prepared statements .  OpenCMIS (Java)  Calendar cal = ...\nFolder folder = ...\n\nQueryStatement qs = session.createQueryStatement( SELECT ?, ? FROM ? WHERE ?   TIMESTAMP ? AND IN_FOLDER(?) OR ? IN (?) );\n\nqs.setProperty(1,  cmis:document ,  cmis:name );\nqs.setProperty(2,  cmis:document ,  cmis:objectId );\nqs.setType(3,  cmis:document );\n\nqs.setProperty(4,  cmis:document ,  cmis:creationDate );\nqs.setDateTime(5, cal);\n\nqs.setId(6, folder);\n\nqs.setProperty(7,  cmis:document ,  cmis:createdBy );\nqs.setString(8,  bob ,  tom ,  lisa ); \n\n// get the compiled query statement\nString statement = qs.toQueryString();\n\n// ... or execute the query directly\nItemIterable QueryResult  results = qs.query(false);", 
            "title": "Using a Query Statement"
        }, 
        {
            "location": "/samples/queries/index.html#query-performance", 
            "text": "Many aspects influence the query performance. Most of them are related to the server implementation and the server setup. Here are some generic hints how clients can influence the query performance.   Only select the properties you really need.  A query should never start with  SELECT *  . Some properties are more expensive than others. For instances, some repositories compile the  cmis:path  property on demand, which takes longer than returning a normal property such as  cmis:name .  Do not order if it isn t required. Sorting the result set in the application may be faster.  Use an Operation context that disables  relationships  (IncludeRelationships.NONE),  renditions  ( cmis:none ), and   allowable actions .  If you are using paging, use an Operation Context with a  batch size that matches the page size .  If you have to process all query results, use an Operation Context with a  big batch size .", 
            "title": "Query Performance"
        }, 
        {
            "location": "/samples/query-examples/index.html", 
            "text": "Common Query Examples\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nA collection of typical query use cases.\n\n\nSimple Query\n\n\nFind all documents in the repository that are named \nhello world\n.\n\n\nSELECT * \nFROM   cmis:document\nWHERE  cmis:name = 'hello world'\n\n\n\n\nComplex query with JOINS\n\n\nJoin types \nPOLICY\n with \nCLAIM\n on property \nPOLICY_NUM\n and \nRISK\n with \nPOLICY\n on \ncmis:objectId\n.\n\n\n(Note: Not all repositories support JOIN)\n\n\nSELECT Y.CLAIM_NUM, X.PROPERTY_ADDRESS, Y.DAMAGE_ESTIMATES, Z.BAND\nFROM   (POLICY AS X JOIN CLAIMS AS Y ON X.POLICY_NUM = Y.POLICY_NUM)\n       JOIN RISK AS Z ON X.cmis:objectId = Z.cmis:objectId\nWHERE  (100000 = ANY Y.DAMAGE_ESTIMATES) AND Z.BAND \n 3\n\n\n\n\nText search query\n\n\nFind all documents that have at least one of the words \npresident\n, \nchancellor\n or \ndirectory\n in the content. Depending on the repository and the repository configuration, also property values are included.\n\n\nSELECT cmis:objectId, cmis:name, SCORE() AS score\nFROM   cmis:document\nWHERE  CONTAINS('president chancellor directory')\n\n\n\n\nQuery for multi-value property\n\n\nFind all objects of type \nmy:cars\n that have a radio or airbag as feature (\nmy:features\n is a multi-value property).\n\n\nSELECT cmis:objectId, cmis:name, my:features\nFROM   my:cars\nWHERE  ANY my:features IN ('radio', 'airbag')\n\n\n\n\nQuery for secondary types\n\n\nCMIS 1.1\n\n\nFind all documents that have a destruction date of 2015-12-31 (midnight UTC) in the secondary type \ncmis:rm_destructionRetention\n.\n\n\n(Note: Repository does not have to support JOIN)\n\n\nSELECT cmis:objectId, cmis:name\nFROM   cmis:document JOIN cmis:rm_destructionRetention\n       ON cmis:objectId = cmis:rm_destructionRetention:objectId\nWHERE  cmis:rm_destructionDate = TIMESTAMP '2015-12-31T00:00:00.000Z'", 
            "title": "Query Examples"
        }, 
        {
            "location": "/samples/query-examples/index.html#common-query-examples", 
            "text": "CMIS 1.0  CMIS 1.1  A collection of typical query use cases.", 
            "title": "Common Query Examples"
        }, 
        {
            "location": "/samples/query-examples/index.html#simple-query", 
            "text": "Find all documents in the repository that are named  hello world .  SELECT * \nFROM   cmis:document\nWHERE  cmis:name = 'hello world'", 
            "title": "Simple Query"
        }, 
        {
            "location": "/samples/query-examples/index.html#complex-query-with-joins", 
            "text": "Join types  POLICY  with  CLAIM  on property  POLICY_NUM  and  RISK  with  POLICY  on  cmis:objectId .  (Note: Not all repositories support JOIN)  SELECT Y.CLAIM_NUM, X.PROPERTY_ADDRESS, Y.DAMAGE_ESTIMATES, Z.BAND\nFROM   (POLICY AS X JOIN CLAIMS AS Y ON X.POLICY_NUM = Y.POLICY_NUM)\n       JOIN RISK AS Z ON X.cmis:objectId = Z.cmis:objectId\nWHERE  (100000 = ANY Y.DAMAGE_ESTIMATES) AND Z.BAND   3", 
            "title": "Complex query with JOINS"
        }, 
        {
            "location": "/samples/query-examples/index.html#text-search-query", 
            "text": "Find all documents that have at least one of the words  president ,  chancellor  or  directory  in the content. Depending on the repository and the repository configuration, also property values are included.  SELECT cmis:objectId, cmis:name, SCORE() AS score\nFROM   cmis:document\nWHERE  CONTAINS('president chancellor directory')", 
            "title": "Text search query"
        }, 
        {
            "location": "/samples/query-examples/index.html#query-for-multi-value-property", 
            "text": "Find all objects of type  my:cars  that have a radio or airbag as feature ( my:features  is a multi-value property).  SELECT cmis:objectId, cmis:name, my:features\nFROM   my:cars\nWHERE  ANY my:features IN ('radio', 'airbag')", 
            "title": "Query for multi-value property"
        }, 
        {
            "location": "/samples/query-examples/index.html#query-for-secondary-types", 
            "text": "CMIS 1.1  Find all documents that have a destruction date of 2015-12-31 (midnight UTC) in the secondary type  cmis:rm_destructionRetention .  (Note: Repository does not have to support JOIN)  SELECT cmis:objectId, cmis:name\nFROM   cmis:document JOIN cmis:rm_destructionRetention\n       ON cmis:objectId = cmis:rm_destructionRetention:objectId\nWHERE  cmis:rm_destructionDate = TIMESTAMP '2015-12-31T00:00:00.000Z'", 
            "title": "Query for secondary types"
        }, 
        {
            "location": "/samples/changelog/index.html", 
            "text": "Retrieving the Change Log\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nSpec 2.1.15\n\n\nOpenCMIS (Java)\n\n\n// get the first 1000 change events\nChangeEvents events = session.getContentChanges(null, true, 1000);\n\nif (events != null \n events.getChangeEvents() != null) {\n    for (ChangeEvent event : events.getChangeEvents()) {\n        String objectId = event.getObjectId();\n        if (event.getChangeType() == ChangeType.DELETED) {\n            // handle delete\n        } else {\n            // get object and handle create, update, and security events\n        }\n    }\n}", 
            "title": "Retrieving the Change Log"
        }, 
        {
            "location": "/samples/changelog/index.html#retrieving-the-change-log", 
            "text": "CMIS 1.0  CMIS 1.1  Spec 2.1.15  OpenCMIS (Java)  // get the first 1000 change events\nChangeEvents events = session.getContentChanges(null, true, 1000);\n\nif (events != null   events.getChangeEvents() != null) {\n    for (ChangeEvent event : events.getChangeEvents()) {\n        String objectId = event.getObjectId();\n        if (event.getChangeType() == ChangeType.DELETED) {\n            // handle delete\n        } else {\n            // get object and handle create, update, and security events\n        }\n    }\n}", 
            "title": "Retrieving the Change Log"
        }, 
        {
            "location": "/samples/allowable-actions/index.html", 
            "text": "Checking Allowable Actions\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nAllowable Actions let clients check if the current user is allowed to perform an action. Clients can and should use this, for example, to disable or remove buttons, menu items, or links that wouldn\nt work for the current user.\n\n\n\n\nNote\n\n\nCalculating the Allowable Actions can be an expensive operation for some CMIS repositories. The performance can suffer noticeably if many objects have to be returned, for example by \ngetChildren()\n. Only request the Allowable Actions if you really need them. Use an \nOperation Context\n to turn Allowable Actions on or off.\n\n\n\n\nOpenCMIS (Java)\n\n\nCmisObject cmisObject = ...\n\nif (cmisObject.hasAllowableAction(Action.CAN_DELETE_OBJECT)) {\n    // do it\n}\n\n\n\n\nPortCMIS (C#)\n\n\nICmisObject cmisObject = ...\n\nif (cmisObject.HasAllowableAction(PortCMIS.Enums.Action.CanDeleteObject)) {\n    // do it\n}", 
            "title": "Checking Allowable Actions"
        }, 
        {
            "location": "/samples/allowable-actions/index.html#checking-allowable-actions", 
            "text": "CMIS 1.0  CMIS 1.1  Allowable Actions let clients check if the current user is allowed to perform an action. Clients can and should use this, for example, to disable or remove buttons, menu items, or links that wouldn t work for the current user.   Note  Calculating the Allowable Actions can be an expensive operation for some CMIS repositories. The performance can suffer noticeably if many objects have to be returned, for example by  getChildren() . Only request the Allowable Actions if you really need them. Use an  Operation Context  to turn Allowable Actions on or off.   OpenCMIS (Java)  CmisObject cmisObject = ...\n\nif (cmisObject.hasAllowableAction(Action.CAN_DELETE_OBJECT)) {\n    // do it\n}  PortCMIS (C#)  ICmisObject cmisObject = ...\n\nif (cmisObject.HasAllowableAction(PortCMIS.Enums.Action.CanDeleteObject)) {\n    // do it\n}", 
            "title": "Checking Allowable Actions"
        }, 
        {
            "location": "/samples/access-control/index.html", 
            "text": "Managing Access Control\n\n\nCMIS 1.0\n\n\nCMIS 1.1\n\n\nWorking with ACLs\n\n\nSpec 2.1.12\n\n\nWorking with Policies\n\n\nSpec 2.1.7", 
            "title": "Managing Access Control"
        }, 
        {
            "location": "/samples/access-control/index.html#managing-access-control", 
            "text": "CMIS 1.0  CMIS 1.1", 
            "title": "Managing Access Control"
        }, 
        {
            "location": "/samples/access-control/index.html#working-with-acls", 
            "text": "Spec 2.1.12", 
            "title": "Working with ACLs"
        }, 
        {
            "location": "/samples/access-control/index.html#working-with-policies", 
            "text": "Spec 2.1.7", 
            "title": "Working with Policies"
        }, 
        {
            "location": "/samples/retention/index.html", 
            "text": "Retention and Holds\n\n\nCMIS 1.1\n\n\nSpec 2.1.16\n\n\nRetention\n\n\nSpec 2.1.16.1\n\n\nSpec 2.1.16.2\n\n\nHolds\n\n\nSpec 2.1.16.3", 
            "title": "Retention and Holds"
        }, 
        {
            "location": "/samples/retention/index.html#retention-and-holds", 
            "text": "CMIS 1.1  Spec 2.1.16", 
            "title": "Retention and Holds"
        }, 
        {
            "location": "/samples/retention/index.html#retention", 
            "text": "Spec 2.1.16.1  Spec 2.1.16.2", 
            "title": "Retention"
        }, 
        {
            "location": "/samples/retention/index.html#holds", 
            "text": "Spec 2.1.16.3", 
            "title": "Holds"
        }, 
        {
            "location": "/about/index.html", 
            "text": "About this Documentation\n\n\n\n\nCreated by the \nApache Chemistry PMC\n.\n\n\nIf you have any questions, subscribe to the \nApache Chemistry Dev Mailing List\n. If you find an error, please create an \nissue\n.\n\n\nLicense: \nApache 2.0\n\n\nApache Chemistry\n, \nApache\n, the Apache feather logo, and the Apache Chemistry project logo are trademarks of \nThe Apache Software Foundation\n.\n\nContent Management Interoperability Services (CMIS) is an \nOASIS\n specification.\n\n\n\n\nDocumentation built with \nMkDocs\n using the modified \nCinder\n theme.", 
            "title": "About"
        }, 
        {
            "location": "/about/index.html#about-this-documentation", 
            "text": "Created by the  Apache Chemistry PMC .  If you have any questions, subscribe to the  Apache Chemistry Dev Mailing List . If you find an error, please create an  issue .  License:  Apache 2.0  Apache Chemistry ,  Apache , the Apache feather logo, and the Apache Chemistry project logo are trademarks of  The Apache Software Foundation . \nContent Management Interoperability Services (CMIS) is an  OASIS  specification.   Documentation built with  MkDocs  using the modified  Cinder  theme.", 
            "title": "About this Documentation"
        }
    ]
}